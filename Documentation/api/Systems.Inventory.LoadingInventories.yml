### YamlMime:ManagedReference
items:
- uid: Systems.Inventory.LoadingInventories
  commentId: T:Systems.Inventory.LoadingInventories
  id: LoadingInventories
  parent: Systems.Inventory
  children:
  - Systems.Inventory.LoadingInventories.LoadDeathInventories(List{Systems.Inventory.InventorySlot},List{Systems.Inventory.InventorySlot},Vector2)
  - Systems.Inventory.LoadingInventories.LoadInventories(List{Systems.Inventory.InventorySlot},List{Systems.Inventory.InventorySlot},IInventoryService)
  langs:
  - csharp
  - vb
  name: LoadingInventories
  nameWithType: LoadingInventories
  fullName: Systems.Inventory.LoadingInventories
  type: Class
  source:
    id: LoadingInventories
    path: ''
    startLine: 15153
  assemblies:
  - cs.temp.dll
  namespace: Systems.Inventory
  syntax:
    content: public static class LoadingInventories
    content.vb: Public Module LoadingInventories
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Systems.Inventory.LoadingInventories.LoadInventories(List{Systems.Inventory.InventorySlot},List{Systems.Inventory.InventorySlot},IInventoryService)
  commentId: M:Systems.Inventory.LoadingInventories.LoadInventories(List{Systems.Inventory.InventorySlot},List{Systems.Inventory.InventorySlot},IInventoryService)
  id: LoadInventories(List{Systems.Inventory.InventorySlot},List{Systems.Inventory.InventorySlot},IInventoryService)
  parent: Systems.Inventory.LoadingInventories
  langs:
  - csharp
  - vb
  name: LoadInventories(List<InventorySlot>, List<InventorySlot>, IInventoryService)
  nameWithType: LoadingInventories.LoadInventories(List<InventorySlot>, List<InventorySlot>, IInventoryService)
  fullName: Systems.Inventory.LoadingInventories.LoadInventories(List<Systems.Inventory.InventorySlot>, List<Systems.Inventory.InventorySlot>, IInventoryService)
  type: Method
  source:
    id: LoadInventories
    path: ''
    startLine: 15155
  assemblies:
  - cs.temp.dll
  namespace: Systems.Inventory
  syntax:
    content: public static UniTask LoadInventories(List<InventorySlot> loadedHotbarSlots, List<InventorySlot> loadedBackpackSlots, IInventoryService inventoryService)
    parameters:
    - id: loadedHotbarSlots
      type: Global.List{Systems.Inventory.InventorySlot}
    - id: loadedBackpackSlots
      type: Global.List{Systems.Inventory.InventorySlot}
    - id: inventoryService
      type: Global.IInventoryService
    return:
      type: Global.UniTask
    content.vb: Public Shared Function LoadInventories(loadedHotbarSlots As List(Of InventorySlot), loadedBackpackSlots As List(Of InventorySlot), inventoryService As IInventoryService) As UniTask
  overload: Systems.Inventory.LoadingInventories.LoadInventories*
  nameWithType.vb: LoadingInventories.LoadInventories(List(Of InventorySlot), List(Of InventorySlot), IInventoryService)
  fullName.vb: Systems.Inventory.LoadingInventories.LoadInventories(List(Of Systems.Inventory.InventorySlot), List(Of Systems.Inventory.InventorySlot), IInventoryService)
  name.vb: LoadInventories(List(Of InventorySlot), List(Of InventorySlot), IInventoryService)
- uid: Systems.Inventory.LoadingInventories.LoadDeathInventories(List{Systems.Inventory.InventorySlot},List{Systems.Inventory.InventorySlot},Vector2)
  commentId: M:Systems.Inventory.LoadingInventories.LoadDeathInventories(List{Systems.Inventory.InventorySlot},List{Systems.Inventory.InventorySlot},Vector2)
  id: LoadDeathInventories(List{Systems.Inventory.InventorySlot},List{Systems.Inventory.InventorySlot},Vector2)
  parent: Systems.Inventory.LoadingInventories
  langs:
  - csharp
  - vb
  name: LoadDeathInventories(List<InventorySlot>, List<InventorySlot>, Vector2)
  nameWithType: LoadingInventories.LoadDeathInventories(List<InventorySlot>, List<InventorySlot>, Vector2)
  fullName: Systems.Inventory.LoadingInventories.LoadDeathInventories(List<Systems.Inventory.InventorySlot>, List<Systems.Inventory.InventorySlot>, Vector2)
  type: Method
  source:
    id: LoadDeathInventories
    path: ''
    startLine: 15194
  assemblies:
  - cs.temp.dll
  namespace: Systems.Inventory
  syntax:
    content: public static UniTask LoadDeathInventories(List<InventorySlot> loadedHotbarSlots, List<InventorySlot> loadedBackpackSlots, Vector2 pos)
    parameters:
    - id: loadedHotbarSlots
      type: Global.List{Systems.Inventory.InventorySlot}
    - id: loadedBackpackSlots
      type: Global.List{Systems.Inventory.InventorySlot}
    - id: pos
      type: Global.Vector2
    return:
      type: Global.UniTask
    content.vb: Public Shared Function LoadDeathInventories(loadedHotbarSlots As List(Of InventorySlot), loadedBackpackSlots As List(Of InventorySlot), pos As Vector2) As UniTask
  overload: Systems.Inventory.LoadingInventories.LoadDeathInventories*
  nameWithType.vb: LoadingInventories.LoadDeathInventories(List(Of InventorySlot), List(Of InventorySlot), Vector2)
  fullName.vb: Systems.Inventory.LoadingInventories.LoadDeathInventories(List(Of Systems.Inventory.InventorySlot), List(Of Systems.Inventory.InventorySlot), Vector2)
  name.vb: LoadDeathInventories(List(Of InventorySlot), List(Of InventorySlot), Vector2)
references:
- uid: Systems.Inventory
  commentId: N:Systems.Inventory
  name: Systems.Inventory
  nameWithType: Systems.Inventory
  fullName: Systems.Inventory
  spec.csharp:
  - uid: Systems
    name: Systems
  - name: .
  - uid: Systems.Inventory
    name: Inventory
  spec.vb:
  - uid: Systems
    name: Systems
  - name: .
  - uid: Systems.Inventory
    name: Inventory
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Systems.Inventory.LoadingInventories.LoadInventories*
  commentId: Overload:Systems.Inventory.LoadingInventories.LoadInventories
  name: LoadInventories
  nameWithType: LoadingInventories.LoadInventories
  fullName: Systems.Inventory.LoadingInventories.LoadInventories
- uid: Global.List{Systems.Inventory.InventorySlot}
  commentId: '!:Global.List{Systems.Inventory.InventorySlot}'
  definition: Global.List`1
  name: List<InventorySlot>
  nameWithType: List<InventorySlot>
  fullName: List<Systems.Inventory.InventorySlot>
  nameWithType.vb: List(Of InventorySlot)
  fullName.vb: List(Of Systems.Inventory.InventorySlot)
  name.vb: List(Of InventorySlot)
  spec.csharp:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - uid: Systems.Inventory.InventorySlot
    name: InventorySlot
  - name: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Systems.Inventory.InventorySlot
    name: InventorySlot
  - name: )
- uid: Global.IInventoryService
  isExternal: true
  name: IInventoryService
  nameWithType: IInventoryService
  fullName: IInventoryService
- uid: Global.UniTask
  isExternal: true
  name: UniTask
  nameWithType: UniTask
  fullName: UniTask
- uid: Global.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: Systems.Inventory.LoadingInventories.LoadDeathInventories*
  commentId: Overload:Systems.Inventory.LoadingInventories.LoadDeathInventories
  name: LoadDeathInventories
  nameWithType: LoadingInventories.LoadDeathInventories
  fullName: Systems.Inventory.LoadingInventories.LoadDeathInventories
- uid: Global.Vector2
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Vector2
