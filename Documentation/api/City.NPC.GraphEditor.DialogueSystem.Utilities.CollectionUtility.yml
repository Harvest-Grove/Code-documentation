### YamlMime:ManagedReference
items:
- uid: City.NPC.GraphEditor.DialogueSystem.Utilities.CollectionUtility
  commentId: T:City.NPC.GraphEditor.DialogueSystem.Utilities.CollectionUtility
  id: CollectionUtility
  parent: City.NPC.GraphEditor.DialogueSystem.Utilities
  children:
  - City.NPC.GraphEditor.DialogueSystem.Utilities.CollectionUtility.AddItem``2(SerializableDictionary{``0,List{``1}},``0,``1)
  langs:
  - csharp
  - vb
  name: CollectionUtility
  nameWithType: CollectionUtility
  fullName: City.NPC.GraphEditor.DialogueSystem.Utilities.CollectionUtility
  type: Class
  source:
    id: CollectionUtility
    path: ''
    startLine: 9305
  assemblies:
  - cs.temp.dll
  namespace: City.NPC.GraphEditor.DialogueSystem.Utilities
  syntax:
    content: public static class CollectionUtility
    content.vb: Public Module CollectionUtility
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: City.NPC.GraphEditor.DialogueSystem.Utilities.CollectionUtility.AddItem``2(SerializableDictionary{``0,List{``1}},``0,``1)
  commentId: M:City.NPC.GraphEditor.DialogueSystem.Utilities.CollectionUtility.AddItem``2(SerializableDictionary{``0,List{``1}},``0,``1)
  id: AddItem``2(SerializableDictionary{``0,List{``1}},``0,``1)
  isExtensionMethod: true
  parent: City.NPC.GraphEditor.DialogueSystem.Utilities.CollectionUtility
  langs:
  - csharp
  - vb
  name: AddItem<T, TK>(SerializableDictionary<T, List<TK>>, T, TK)
  nameWithType: CollectionUtility.AddItem<T, TK>(SerializableDictionary<T, List<TK>>, T, TK)
  fullName: City.NPC.GraphEditor.DialogueSystem.Utilities.CollectionUtility.AddItem<T, TK>(SerializableDictionary<T, List<TK>>, T, TK)
  type: Method
  source:
    id: AddItem
    path: ''
    startLine: 9307
  assemblies:
  - cs.temp.dll
  namespace: City.NPC.GraphEditor.DialogueSystem.Utilities
  syntax:
    content: public static void AddItem<T, TK>(this SerializableDictionary<T, List<TK>> serializableDictionary, T key, TK value)
    parameters:
    - id: serializableDictionary
      type: Global.SerializableDictionary{{T},List{{TK}}}
    - id: key
      type: '{T}'
    - id: value
      type: '{TK}'
    typeParameters:
    - id: T
    - id: TK
    content.vb: Public Shared Sub AddItem(Of T, TK)(serializableDictionary As SerializableDictionary(Of T, List(Of TK)), key As T, value As TK)
  overload: City.NPC.GraphEditor.DialogueSystem.Utilities.CollectionUtility.AddItem*
  nameWithType.vb: CollectionUtility.AddItem(Of T, TK)(SerializableDictionary(Of T, List(Of TK)), T, TK)
  fullName.vb: City.NPC.GraphEditor.DialogueSystem.Utilities.CollectionUtility.AddItem(Of T, TK)(SerializableDictionary(Of T, List(Of TK)), T, TK)
  name.vb: AddItem(Of T, TK)(SerializableDictionary(Of T, List(Of TK)), T, TK)
references:
- uid: City.NPC.GraphEditor.DialogueSystem.Utilities
  commentId: N:City.NPC.GraphEditor.DialogueSystem.Utilities
  name: City.NPC.GraphEditor.DialogueSystem.Utilities
  nameWithType: City.NPC.GraphEditor.DialogueSystem.Utilities
  fullName: City.NPC.GraphEditor.DialogueSystem.Utilities
  spec.csharp:
  - uid: City
    name: City
  - name: .
  - uid: City.NPC
    name: NPC
  - name: .
  - uid: City.NPC.GraphEditor
    name: GraphEditor
  - name: .
  - uid: City.NPC.GraphEditor.DialogueSystem
    name: DialogueSystem
  - name: .
  - uid: City.NPC.GraphEditor.DialogueSystem.Utilities
    name: Utilities
  spec.vb:
  - uid: City
    name: City
  - name: .
  - uid: City.NPC
    name: NPC
  - name: .
  - uid: City.NPC.GraphEditor
    name: GraphEditor
  - name: .
  - uid: City.NPC.GraphEditor.DialogueSystem
    name: DialogueSystem
  - name: .
  - uid: City.NPC.GraphEditor.DialogueSystem.Utilities
    name: Utilities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: City.NPC.GraphEditor.DialogueSystem.Utilities.CollectionUtility.AddItem*
  commentId: Overload:City.NPC.GraphEditor.DialogueSystem.Utilities.CollectionUtility.AddItem
  name: AddItem
  nameWithType: CollectionUtility.AddItem
  fullName: City.NPC.GraphEditor.DialogueSystem.Utilities.CollectionUtility.AddItem
- uid: Global.SerializableDictionary{{T},List{{TK}}}
  commentId: '!:Global.SerializableDictionary{``0,List{``1}}'
  definition: Global.SerializableDictionary`2
  name: SerializableDictionary<T, List<TK>>
  nameWithType: SerializableDictionary<T, List<TK>>
  fullName: SerializableDictionary<T, List<TK>>
  nameWithType.vb: SerializableDictionary(Of T, List(Of TK))
  fullName.vb: SerializableDictionary(Of T, List(Of TK))
  name.vb: SerializableDictionary(Of T, List(Of TK))
  spec.csharp:
  - uid: Global.SerializableDictionary`2
    name: SerializableDictionary
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - name: TK
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: Global.SerializableDictionary`2
    name: SerializableDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TK
  - name: )
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: '{TK}'
  commentId: '!:TK'
  definition: TK
  name: TK
  nameWithType: TK
  fullName: TK
- uid: Global.SerializableDictionary`2
  isExternal: true
  name: SerializableDictionary<, >
  nameWithType: SerializableDictionary<, >
  fullName: SerializableDictionary<, >
  nameWithType.vb: SerializableDictionary(Of , )
  fullName.vb: SerializableDictionary(Of , )
  name.vb: SerializableDictionary(Of , )
  spec.csharp:
  - uid: Global.SerializableDictionary`2
    name: SerializableDictionary
    isExternal: true
  - name: <
  - name: ''
  - name: ','
  - name: " "
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.SerializableDictionary`2
    name: SerializableDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: ','
  - name: " "
  - name: ''
  - name: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: TK
  commentId: '!:TK'
  name: TK
  nameWithType: TK
  fullName: TK
