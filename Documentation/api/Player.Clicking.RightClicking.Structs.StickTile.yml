### YamlMime:ManagedReference
items:
- uid: Player.Clicking.RightClicking.Structs.StickTile
  commentId: T:Player.Clicking.RightClicking.Structs.StickTile
  id: StickTile
  parent: Player.Clicking.RightClicking.Structs
  children:
  - Player.Clicking.RightClicking.Structs.StickTile.GivenStick
  - Player.Clicking.RightClicking.Structs.StickTile.Tiles
  langs:
  - csharp
  - vb
  name: StickTile
  nameWithType: StickTile
  fullName: Player.Clicking.RightClicking.Structs.StickTile
  type: Struct
  source:
    id: StickTile
    path: ''
    startLine: 35396
  assemblies:
  - cs.temp.dll
  namespace: Player.Clicking.RightClicking.Structs
  syntax:
    content: public struct StickTile
    content.vb: Public Structure StickTile
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
- uid: Player.Clicking.RightClicking.Structs.StickTile.GivenStick
  commentId: F:Player.Clicking.RightClicking.Structs.StickTile.GivenStick
  id: GivenStick
  parent: Player.Clicking.RightClicking.Structs.StickTile
  langs:
  - csharp
  - vb
  name: GivenStick
  nameWithType: StickTile.GivenStick
  fullName: Player.Clicking.RightClicking.Structs.StickTile.GivenStick
  type: Field
  source:
    id: GivenStick
    path: ''
    startLine: 35399
  assemblies:
  - cs.temp.dll
  namespace: Player.Clicking.RightClicking.Structs
  syntax:
    content: public MaterialSO GivenStick
    return:
      type: Global.MaterialSO
    content.vb: Public GivenStick As MaterialSO
- uid: Player.Clicking.RightClicking.Structs.StickTile.Tiles
  commentId: F:Player.Clicking.RightClicking.Structs.StickTile.Tiles
  id: Tiles
  parent: Player.Clicking.RightClicking.Structs.StickTile
  langs:
  - csharp
  - vb
  name: Tiles
  nameWithType: StickTile.Tiles
  fullName: Player.Clicking.RightClicking.Structs.StickTile.Tiles
  type: Field
  source:
    id: Tiles
    path: ''
    startLine: 35400
  assemblies:
  - cs.temp.dll
  namespace: Player.Clicking.RightClicking.Structs
  syntax:
    content: public List<ObjectTileTypeEnum> Tiles
    return:
      type: Global.List{ObjectTileTypeEnum}
    content.vb: Public Tiles As List(Of ObjectTileTypeEnum)
references:
- uid: Player.Clicking.RightClicking.Structs
  commentId: N:Player.Clicking.RightClicking.Structs
  name: Player.Clicking.RightClicking.Structs
  nameWithType: Player.Clicking.RightClicking.Structs
  fullName: Player.Clicking.RightClicking.Structs
  spec.csharp:
  - uid: Player
    name: Player
  - name: .
  - uid: Player.Clicking
    name: Clicking
  - name: .
  - uid: Player.Clicking.RightClicking
    name: RightClicking
  - name: .
  - uid: Player.Clicking.RightClicking.Structs
    name: Structs
  spec.vb:
  - uid: Player
    name: Player
  - name: .
  - uid: Player.Clicking
    name: Clicking
  - name: .
  - uid: Player.Clicking.RightClicking
    name: RightClicking
  - name: .
  - uid: Player.Clicking.RightClicking.Structs
    name: Structs
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.MaterialSO
  isExternal: true
  name: MaterialSO
  nameWithType: MaterialSO
  fullName: MaterialSO
- uid: Global.List{ObjectTileTypeEnum}
  commentId: '!:Global.List{ObjectTileTypeEnum}'
  definition: Global.List`1
  name: List<ObjectTileTypeEnum>
  nameWithType: List<ObjectTileTypeEnum>
  fullName: List<ObjectTileTypeEnum>
  nameWithType.vb: List(Of ObjectTileTypeEnum)
  fullName.vb: List(Of ObjectTileTypeEnum)
  name.vb: List(Of ObjectTileTypeEnum)
  spec.csharp:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - uid: Global.ObjectTileTypeEnum
    name: ObjectTileTypeEnum
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.ObjectTileTypeEnum
    name: ObjectTileTypeEnum
    isExternal: true
  - name: )
- uid: Global.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
