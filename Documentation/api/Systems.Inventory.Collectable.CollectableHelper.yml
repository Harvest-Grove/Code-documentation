### YamlMime:ManagedReference
items:
- uid: Systems.Inventory.Collectable.CollectableHelper
  commentId: T:Systems.Inventory.Collectable.CollectableHelper
  id: CollectableHelper
  parent: Systems.Inventory.Collectable
  children:
  - Systems.Inventory.Collectable.CollectableHelper.GetMainDrop(KeyValuePair{InventoryItemData,List{Systems.Inventory.Collectable.Collectable}},System.Int32)
  - Systems.Inventory.Collectable.CollectableHelper.GetSimilarItems(Collider2D[])
  langs:
  - csharp
  - vb
  name: CollectableHelper
  nameWithType: CollectableHelper
  fullName: Systems.Inventory.Collectable.CollectableHelper
  type: Class
  source:
    id: CollectableHelper
    path: ''
    startLine: 17205
  assemblies:
  - cs.temp.dll
  namespace: Systems.Inventory.Collectable
  syntax:
    content: public static class CollectableHelper
    content.vb: Public Module CollectableHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Systems.Inventory.Collectable.CollectableHelper.GetSimilarItems(Collider2D[])
  commentId: M:Systems.Inventory.Collectable.CollectableHelper.GetSimilarItems(Collider2D[])
  id: GetSimilarItems(Collider2D[])
  parent: Systems.Inventory.Collectable.CollectableHelper
  langs:
  - csharp
  - vb
  name: GetSimilarItems(Collider2D[])
  nameWithType: CollectableHelper.GetSimilarItems(Collider2D[])
  fullName: Systems.Inventory.Collectable.CollectableHelper.GetSimilarItems(Collider2D[])
  type: Method
  source:
    id: GetSimilarItems
    path: ''
    startLine: 17213
  assemblies:
  - cs.temp.dll
  namespace: Systems.Inventory.Collectable
  summary: "\nConverts an array of Collider2D to a List of ItemPickUp,\nthen returns a dictionary of grouped items by their ItemData. \n"
  example: []
  syntax:
    content: public static Dictionary<InventoryItemData, List<Collectable>> GetSimilarItems(Collider2D[] colliders)
    parameters:
    - id: colliders
      type: Global.Collider2D[]
      description: The colliders of the drops to group
    return:
      type: Global.Dictionary{InventoryItemData,List{Systems.Inventory.Collectable.Collectable}}
      description: The grouped items
    content.vb: Public Shared Function GetSimilarItems(colliders As Collider2D()) As Dictionary(Of InventoryItemData, List(Of Collectable))
  overload: Systems.Inventory.Collectable.CollectableHelper.GetSimilarItems*
  nameWithType.vb: CollectableHelper.GetSimilarItems(Collider2D())
  fullName.vb: Systems.Inventory.Collectable.CollectableHelper.GetSimilarItems(Collider2D())
  name.vb: GetSimilarItems(Collider2D())
- uid: Systems.Inventory.Collectable.CollectableHelper.GetMainDrop(KeyValuePair{InventoryItemData,List{Systems.Inventory.Collectable.Collectable}},System.Int32)
  commentId: M:Systems.Inventory.Collectable.CollectableHelper.GetMainDrop(KeyValuePair{InventoryItemData,List{Systems.Inventory.Collectable.Collectable}},System.Int32)
  id: GetMainDrop(KeyValuePair{InventoryItemData,List{Systems.Inventory.Collectable.Collectable}},System.Int32)
  parent: Systems.Inventory.Collectable.CollectableHelper
  langs:
  - csharp
  - vb
  name: GetMainDrop(KeyValuePair<InventoryItemData, List<Collectable>>, int)
  nameWithType: CollectableHelper.GetMainDrop(KeyValuePair<InventoryItemData, List<Collectable>>, int)
  fullName: Systems.Inventory.Collectable.CollectableHelper.GetMainDrop(KeyValuePair<InventoryItemData, List<Systems.Inventory.Collectable.Collectable>>, int)
  type: Method
  source:
    id: GetMainDrop
    path: ''
    startLine: 17245
  assemblies:
  - cs.temp.dll
  namespace: Systems.Inventory.Collectable
  summary: "\nChecks the object with the highest lifetime (i.e. oldest).\nIf the objects have the same lifetime, then it chooses one totally random.\n"
  example: []
  syntax:
    content: public static Collectable GetMainDrop(KeyValuePair<InventoryItemData, List<Collectable>> drops, int currentItemID)
    parameters:
    - id: drops
      type: Global.KeyValuePair{InventoryItemData,List{Systems.Inventory.Collectable.Collectable}}
      description: A list with similar drops
    - id: currentItemID
      type: System.Int32
    return:
      type: Systems.Inventory.Collectable.Collectable
      description: The oldest drop.
    content.vb: Public Shared Function GetMainDrop(drops As KeyValuePair(Of InventoryItemData, List(Of Collectable)), currentItemID As Integer) As Collectable
  overload: Systems.Inventory.Collectable.CollectableHelper.GetMainDrop*
  nameWithType.vb: CollectableHelper.GetMainDrop(KeyValuePair(Of InventoryItemData, List(Of Collectable)), Integer)
  fullName.vb: Systems.Inventory.Collectable.CollectableHelper.GetMainDrop(KeyValuePair(Of InventoryItemData, List(Of Systems.Inventory.Collectable.Collectable)), Integer)
  name.vb: GetMainDrop(KeyValuePair(Of InventoryItemData, List(Of Collectable)), Integer)
references:
- uid: Systems.Inventory.Collectable
  commentId: N:Systems.Inventory.Collectable
  name: Systems.Inventory.Collectable
  nameWithType: Systems.Inventory.Collectable
  fullName: Systems.Inventory.Collectable
  spec.csharp:
  - uid: Systems
    name: Systems
  - name: .
  - uid: Systems.Inventory
    name: Inventory
  - name: .
  - uid: Systems.Inventory.Collectable
    name: Collectable
  spec.vb:
  - uid: Systems
    name: Systems
  - name: .
  - uid: Systems.Inventory
    name: Inventory
  - name: .
  - uid: Systems.Inventory.Collectable
    name: Collectable
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Systems.Inventory.Collectable.CollectableHelper.GetSimilarItems*
  commentId: Overload:Systems.Inventory.Collectable.CollectableHelper.GetSimilarItems
  name: GetSimilarItems
  nameWithType: CollectableHelper.GetSimilarItems
  fullName: Systems.Inventory.Collectable.CollectableHelper.GetSimilarItems
- uid: Global.Collider2D[]
  isExternal: true
  name: Collider2D[]
  nameWithType: Collider2D[]
  fullName: Collider2D[]
  nameWithType.vb: Collider2D()
  fullName.vb: Collider2D()
  name.vb: Collider2D()
  spec.csharp:
  - uid: Global.Collider2D
    name: Collider2D
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Global.Collider2D
    name: Collider2D
    isExternal: true
  - name: (
  - name: )
- uid: Global.Dictionary{InventoryItemData,List{Systems.Inventory.Collectable.Collectable}}
  commentId: '!:Global.Dictionary{InventoryItemData,List{Systems.Inventory.Collectable.Collectable}}'
  definition: Global.Dictionary`2
  name: Dictionary<InventoryItemData, List<Collectable>>
  nameWithType: Dictionary<InventoryItemData, List<Collectable>>
  fullName: Dictionary<InventoryItemData, List<Systems.Inventory.Collectable.Collectable>>
  nameWithType.vb: Dictionary(Of InventoryItemData, List(Of Collectable))
  fullName.vb: Dictionary(Of InventoryItemData, List(Of Systems.Inventory.Collectable.Collectable))
  name.vb: Dictionary(Of InventoryItemData, List(Of Collectable))
  spec.csharp:
  - uid: Global.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: <
  - uid: Global.InventoryItemData
    name: InventoryItemData
    isExternal: true
  - name: ','
  - name: " "
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - uid: Systems.Inventory.Collectable.Collectable
    name: Collectable
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: Global.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.InventoryItemData
    name: InventoryItemData
    isExternal: true
  - name: ','
  - name: " "
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Systems.Inventory.Collectable.Collectable
    name: Collectable
  - name: )
  - name: )
- uid: Global.Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: Global.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: <
  - name: ''
  - name: ','
  - name: " "
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: ','
  - name: " "
  - name: ''
  - name: )
- uid: Systems.Inventory.Collectable.CollectableHelper.GetMainDrop*
  commentId: Overload:Systems.Inventory.Collectable.CollectableHelper.GetMainDrop
  name: GetMainDrop
  nameWithType: CollectableHelper.GetMainDrop
  fullName: Systems.Inventory.Collectable.CollectableHelper.GetMainDrop
- uid: Global.KeyValuePair{InventoryItemData,List{Systems.Inventory.Collectable.Collectable}}
  commentId: '!:Global.KeyValuePair{InventoryItemData,List{Systems.Inventory.Collectable.Collectable}}'
  definition: Global.KeyValuePair`2
  name: KeyValuePair<InventoryItemData, List<Collectable>>
  nameWithType: KeyValuePair<InventoryItemData, List<Collectable>>
  fullName: KeyValuePair<InventoryItemData, List<Systems.Inventory.Collectable.Collectable>>
  nameWithType.vb: KeyValuePair(Of InventoryItemData, List(Of Collectable))
  fullName.vb: KeyValuePair(Of InventoryItemData, List(Of Systems.Inventory.Collectable.Collectable))
  name.vb: KeyValuePair(Of InventoryItemData, List(Of Collectable))
  spec.csharp:
  - uid: Global.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
  - name: <
  - uid: Global.InventoryItemData
    name: InventoryItemData
    isExternal: true
  - name: ','
  - name: " "
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - uid: Systems.Inventory.Collectable.Collectable
    name: Collectable
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: Global.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.InventoryItemData
    name: InventoryItemData
    isExternal: true
  - name: ','
  - name: " "
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Systems.Inventory.Collectable.Collectable
    name: Collectable
  - name: )
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Systems.Inventory.Collectable.Collectable
  commentId: T:Systems.Inventory.Collectable.Collectable
  parent: Systems.Inventory.Collectable
  name: Collectable
  nameWithType: Collectable
  fullName: Systems.Inventory.Collectable.Collectable
- uid: Global.KeyValuePair`2
  isExternal: true
  name: KeyValuePair<, >
  nameWithType: KeyValuePair<, >
  fullName: KeyValuePair<, >
  nameWithType.vb: KeyValuePair(Of , )
  fullName.vb: KeyValuePair(Of , )
  name.vb: KeyValuePair(Of , )
  spec.csharp:
  - uid: Global.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
  - name: <
  - name: ''
  - name: ','
  - name: " "
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: ','
  - name: " "
  - name: ''
  - name: )
