### YamlMime:ManagedReference
items:
- uid: Managers._GameManager.Injections.GameService
  commentId: T:Managers._GameManager.Injections.GameService
  id: GameService
  parent: Managers._GameManager.Injections
  children:
  - Managers._GameManager.Injections.GameService.Clear
  - Managers._GameManager.Injections.GameService.Get(Type)
  - Managers._GameManager.Injections.GameService.Get``1
  - Managers._GameManager.Injections.GameService.IsReady
  - Managers._GameManager.Injections.GameService.IsRegistered(Type)
  - Managers._GameManager.Injections.GameService.IsRegistered``1
  - Managers._GameManager.Injections.GameService.Register``1(``0)
  langs:
  - csharp
  - vb
  name: GameService
  nameWithType: GameService
  fullName: Managers._GameManager.Injections.GameService
  type: Class
  source:
    id: GameService
    path: ''
    startLine: 42038
  assemblies:
  - cs.temp.dll
  namespace: Managers._GameManager.Injections
  summary: "\nStatic service locator for registering and retrieving game services.\n"
  example: []
  syntax:
    content: public static class GameService
    content.vb: Public Module GameService
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Managers._GameManager.Injections.GameService.IsReady
  commentId: F:Managers._GameManager.Injections.GameService.IsReady
  id: IsReady
  parent: Managers._GameManager.Injections.GameService
  langs:
  - csharp
  - vb
  name: IsReady
  nameWithType: GameService.IsReady
  fullName: Managers._GameManager.Injections.GameService.IsReady
  type: Field
  source:
    id: IsReady
    path: ''
    startLine: 42043
  assemblies:
  - cs.temp.dll
  namespace: Managers._GameManager.Injections
  summary: "\nIndicates if the service system is ready.\n"
  example: []
  syntax:
    content: public static bool IsReady
    return:
      type: System.Boolean
    content.vb: Public Shared IsReady As Boolean
- uid: Managers._GameManager.Injections.GameService.Register``1(``0)
  commentId: M:Managers._GameManager.Injections.GameService.Register``1(``0)
  id: Register``1(``0)
  parent: Managers._GameManager.Injections.GameService
  langs:
  - csharp
  - vb
  name: Register<TInterface>(TInterface)
  nameWithType: GameService.Register<TInterface>(TInterface)
  fullName: Managers._GameManager.Injections.GameService.Register<TInterface>(TInterface)
  type: Method
  source:
    id: Register
    path: ''
    startLine: 42054
  assemblies:
  - cs.temp.dll
  namespace: Managers._GameManager.Injections
  summary: "\nRegisters a service instance for a given interface type.\nOverwrites if already registered.\n"
  example: []
  syntax:
    content: public static void Register<TInterface>(TInterface service)
    parameters:
    - id: service
      type: '{TInterface}'
    typeParameters:
    - id: TInterface
    content.vb: Public Shared Sub Register(Of TInterface)(service As TInterface)
  overload: Managers._GameManager.Injections.GameService.Register*
  nameWithType.vb: GameService.Register(Of TInterface)(TInterface)
  fullName.vb: Managers._GameManager.Injections.GameService.Register(Of TInterface)(TInterface)
  name.vb: Register(Of TInterface)(TInterface)
- uid: Managers._GameManager.Injections.GameService.Get``1
  commentId: M:Managers._GameManager.Injections.GameService.Get``1
  id: Get``1
  parent: Managers._GameManager.Injections.GameService
  langs:
  - csharp
  - vb
  name: Get<TInterface>()
  nameWithType: GameService.Get<TInterface>()
  fullName: Managers._GameManager.Injections.GameService.Get<TInterface>()
  type: Method
  source:
    id: Get
    path: ''
    startLine: 42069
  assemblies:
  - cs.temp.dll
  namespace: Managers._GameManager.Injections
  summary: "\nRetrieves a registered service by its interface type.\n"
  example: []
  syntax:
    content: public static TInterface Get<TInterface>()
    typeParameters:
    - id: TInterface
    return:
      type: '{TInterface}'
    content.vb: Public Shared Function [Get](Of TInterface)() As TInterface
  overload: Managers._GameManager.Injections.GameService.Get*
  nameWithType.vb: GameService.Get(Of TInterface)()
  fullName.vb: Managers._GameManager.Injections.GameService.Get(Of TInterface)()
  name.vb: Get(Of TInterface)()
- uid: Managers._GameManager.Injections.GameService.Get(Type)
  commentId: M:Managers._GameManager.Injections.GameService.Get(Type)
  id: Get(Type)
  parent: Managers._GameManager.Injections.GameService
  langs:
  - csharp
  - vb
  name: Get(Type)
  nameWithType: GameService.Get(Type)
  fullName: Managers._GameManager.Injections.GameService.Get(Type)
  type: Method
  source:
    id: Get
    path: ''
    startLine: 42085
  assemblies:
  - cs.temp.dll
  namespace: Managers._GameManager.Injections
  summary: "\nRetrieves a registered service by its type.\n"
  example: []
  syntax:
    content: public static object Get(Type type)
    parameters:
    - id: type
      type: Global.Type
    return:
      type: System.Object
    content.vb: Public Shared Function [Get](type As Type) As Object
  overload: Managers._GameManager.Injections.GameService.Get*
- uid: Managers._GameManager.Injections.GameService.IsRegistered``1
  commentId: M:Managers._GameManager.Injections.GameService.IsRegistered``1
  id: IsRegistered``1
  parent: Managers._GameManager.Injections.GameService
  langs:
  - csharp
  - vb
  name: IsRegistered<TInterface>()
  nameWithType: GameService.IsRegistered<TInterface>()
  fullName: Managers._GameManager.Injections.GameService.IsRegistered<TInterface>()
  type: Method
  source:
    id: IsRegistered
    path: ''
    startLine: 42099
  assemblies:
  - cs.temp.dll
  namespace: Managers._GameManager.Injections
  summary: "\nChecks if a service of the given interface type is registered.\n"
  example: []
  syntax:
    content: public static bool IsRegistered<TInterface>()
    typeParameters:
    - id: TInterface
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsRegistered(Of TInterface)() As Boolean
  overload: Managers._GameManager.Injections.GameService.IsRegistered*
  nameWithType.vb: GameService.IsRegistered(Of TInterface)()
  fullName.vb: Managers._GameManager.Injections.GameService.IsRegistered(Of TInterface)()
  name.vb: IsRegistered(Of TInterface)()
- uid: Managers._GameManager.Injections.GameService.IsRegistered(Type)
  commentId: M:Managers._GameManager.Injections.GameService.IsRegistered(Type)
  id: IsRegistered(Type)
  parent: Managers._GameManager.Injections.GameService
  langs:
  - csharp
  - vb
  name: IsRegistered(Type)
  nameWithType: GameService.IsRegistered(Type)
  fullName: Managers._GameManager.Injections.GameService.IsRegistered(Type)
  type: Method
  source:
    id: IsRegistered
    path: ''
    startLine: 42104
  assemblies:
  - cs.temp.dll
  namespace: Managers._GameManager.Injections
  summary: "\nChecks if a service of the given type is registered.\n"
  example: []
  syntax:
    content: public static bool IsRegistered(Type type)
    parameters:
    - id: type
      type: Global.Type
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsRegistered(type As Type) As Boolean
  overload: Managers._GameManager.Injections.GameService.IsRegistered*
- uid: Managers._GameManager.Injections.GameService.Clear
  commentId: M:Managers._GameManager.Injections.GameService.Clear
  id: Clear
  parent: Managers._GameManager.Injections.GameService
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: GameService.Clear()
  fullName: Managers._GameManager.Injections.GameService.Clear()
  type: Method
  source:
    id: Clear
    path: ''
    startLine: 42109
  assemblies:
  - cs.temp.dll
  namespace: Managers._GameManager.Injections
  summary: "\nClears all registered services.\n"
  example: []
  syntax:
    content: public static void Clear()
    content.vb: Public Shared Sub Clear()
  overload: Managers._GameManager.Injections.GameService.Clear*
references:
- uid: Managers._GameManager.Injections
  commentId: N:Managers._GameManager.Injections
  name: Managers._GameManager.Injections
  nameWithType: Managers._GameManager.Injections
  fullName: Managers._GameManager.Injections
  spec.csharp:
  - uid: Managers
    name: Managers
  - name: .
  - uid: Managers._GameManager
    name: _GameManager
  - name: .
  - uid: Managers._GameManager.Injections
    name: Injections
  spec.vb:
  - uid: Managers
    name: Managers
  - name: .
  - uid: Managers._GameManager
    name: _GameManager
  - name: .
  - uid: Managers._GameManager.Injections
    name: Injections
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Managers._GameManager.Injections.GameService.Register*
  commentId: Overload:Managers._GameManager.Injections.GameService.Register
  name: Register
  nameWithType: GameService.Register
  fullName: Managers._GameManager.Injections.GameService.Register
- uid: '{TInterface}'
  commentId: '!:TInterface'
  definition: TInterface
  name: TInterface
  nameWithType: TInterface
  fullName: TInterface
- uid: TInterface
  name: TInterface
  nameWithType: TInterface
  fullName: TInterface
- uid: Managers._GameManager.Injections.GameService.Get*
  commentId: Overload:Managers._GameManager.Injections.GameService.Get
  name: Get
  nameWithType: GameService.Get
  fullName: Managers._GameManager.Injections.GameService.Get
- uid: Global.Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: Type
- uid: Managers._GameManager.Injections.GameService.IsRegistered*
  commentId: Overload:Managers._GameManager.Injections.GameService.IsRegistered
  name: IsRegistered
  nameWithType: GameService.IsRegistered
  fullName: Managers._GameManager.Injections.GameService.IsRegistered
- uid: Managers._GameManager.Injections.GameService.Clear*
  commentId: Overload:Managers._GameManager.Injections.GameService.Clear
  name: Clear
  nameWithType: GameService.Clear
  fullName: Managers._GameManager.Injections.GameService.Clear
