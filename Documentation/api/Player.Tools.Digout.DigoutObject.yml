### YamlMime:ManagedReference
items:
- uid: Player.Tools.Digout.DigoutObject
  commentId: T:Player.Tools.Digout.DigoutObject
  id: DigoutObject
  parent: Player.Tools.Digout
  children:
  - Player.Tools.Digout.DigoutObject.IsDroppable
  - Player.Tools.Digout.DigoutObject.ItemsToGet
  - Player.Tools.Digout.DigoutObject.TileType
  - Player.Tools.Digout.DigoutObject.UsesHarborStructure
  langs:
  - csharp
  - vb
  name: DigoutObject
  nameWithType: DigoutObject
  fullName: Player.Tools.Digout.DigoutObject
  type: Class
  source:
    id: DigoutObject
    path: ''
    startLine: 37855
  assemblies:
  - cs.temp.dll
  namespace: Player.Tools.Digout
  syntax:
    content: >-
      [Serializable]

      public class DigoutObject
    content.vb: >-
      <Serializable>

      Public Class DigoutObject
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
- uid: Player.Tools.Digout.DigoutObject.TileType
  commentId: F:Player.Tools.Digout.DigoutObject.TileType
  id: TileType
  parent: Player.Tools.Digout.DigoutObject
  langs:
  - csharp
  - vb
  name: TileType
  nameWithType: DigoutObject.TileType
  fullName: Player.Tools.Digout.DigoutObject.TileType
  type: Field
  source:
    id: TileType
    path: ''
    startLine: 37862
  assemblies:
  - cs.temp.dll
  namespace: Player.Tools.Digout
  syntax:
    content: public ObjectTileTypeEnum TileType
    return:
      type: Global.ObjectTileTypeEnum
    content.vb: Public TileType As ObjectTileTypeEnum
- uid: Player.Tools.Digout.DigoutObject.ItemsToGet
  commentId: F:Player.Tools.Digout.DigoutObject.ItemsToGet
  id: ItemsToGet
  parent: Player.Tools.Digout.DigoutObject
  langs:
  - csharp
  - vb
  name: ItemsToGet
  nameWithType: DigoutObject.ItemsToGet
  fullName: Player.Tools.Digout.DigoutObject.ItemsToGet
  type: Field
  source:
    id: ItemsToGet
    path: ''
    startLine: 37866
  assemblies:
  - cs.temp.dll
  namespace: Player.Tools.Digout
  summary: "\nItems, which player will get if he destroy the object.\n"
  example: []
  syntax:
    content: public DigoutItemToInventory[] ItemsToGet
    return:
      type: Player.Tools.Digout.DigoutItemToInventory[]
    content.vb: Public ItemsToGet As DigoutItemToInventory()
- uid: Player.Tools.Digout.DigoutObject.IsDroppable
  commentId: F:Player.Tools.Digout.DigoutObject.IsDroppable
  id: IsDroppable
  parent: Player.Tools.Digout.DigoutObject
  langs:
  - csharp
  - vb
  name: IsDroppable
  nameWithType: DigoutObject.IsDroppable
  fullName: Player.Tools.Digout.DigoutObject.IsDroppable
  type: Field
  source:
    id: IsDroppable
    path: ''
    startLine: 37867
  assemblies:
  - cs.temp.dll
  namespace: Player.Tools.Digout
  syntax:
    content: public bool IsDroppable
    return:
      type: System.Boolean
    content.vb: Public IsDroppable As Boolean
- uid: Player.Tools.Digout.DigoutObject.UsesHarborStructure
  commentId: F:Player.Tools.Digout.DigoutObject.UsesHarborStructure
  id: UsesHarborStructure
  parent: Player.Tools.Digout.DigoutObject
  langs:
  - csharp
  - vb
  name: UsesHarborStructure
  nameWithType: DigoutObject.UsesHarborStructure
  fullName: Player.Tools.Digout.DigoutObject.UsesHarborStructure
  type: Field
  source:
    id: UsesHarborStructure
    path: ''
    startLine: 37868
  assemblies:
  - cs.temp.dll
  namespace: Player.Tools.Digout
  syntax:
    content: public bool UsesHarborStructure
    return:
      type: System.Boolean
    content.vb: Public UsesHarborStructure As Boolean
references:
- uid: Player.Tools.Digout
  commentId: N:Player.Tools.Digout
  name: Player.Tools.Digout
  nameWithType: Player.Tools.Digout
  fullName: Player.Tools.Digout
  spec.csharp:
  - uid: Player
    name: Player
  - name: .
  - uid: Player.Tools
    name: Tools
  - name: .
  - uid: Player.Tools.Digout
    name: Digout
  spec.vb:
  - uid: Player
    name: Player
  - name: .
  - uid: Player.Tools
    name: Tools
  - name: .
  - uid: Player.Tools.Digout
    name: Digout
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.ObjectTileTypeEnum
  isExternal: true
  name: ObjectTileTypeEnum
  nameWithType: ObjectTileTypeEnum
  fullName: ObjectTileTypeEnum
- uid: Player.Tools.Digout.DigoutItemToInventory[]
  isExternal: true
  name: DigoutItemToInventory[]
  nameWithType: DigoutItemToInventory[]
  fullName: Player.Tools.Digout.DigoutItemToInventory[]
  nameWithType.vb: DigoutItemToInventory()
  fullName.vb: Player.Tools.Digout.DigoutItemToInventory()
  name.vb: DigoutItemToInventory()
  spec.csharp:
  - uid: Player.Tools.Digout.DigoutItemToInventory
    name: DigoutItemToInventory
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Player.Tools.Digout.DigoutItemToInventory
    name: DigoutItemToInventory
  - name: (
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
