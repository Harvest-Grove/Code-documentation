### YamlMime:ManagedReference
items:
- uid: World.Harbor.HarborData
  commentId: T:World.Harbor.HarborData
  id: HarborData
  parent: World.Harbor
  children:
  - World.Harbor.HarborData.#ctor
  - World.Harbor.HarborData.#ctor(List{Vector3Int},System.Int32)
  - World.Harbor.HarborData.EdgeIndex
  - World.Harbor.HarborData.HarborPositions
  langs:
  - csharp
  - vb
  name: HarborData
  nameWithType: HarborData
  fullName: World.Harbor.HarborData
  type: Class
  source:
    id: HarborData
    path: ''
    startLine: 8159
  assemblies:
  - cs.temp.dll
  namespace: World.Harbor
  syntax:
    content: >-
      [Serializable]

      public class HarborData
    content.vb: >-
      <Serializable>

      Public Class HarborData
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
- uid: World.Harbor.HarborData.HarborPositions
  commentId: F:World.Harbor.HarborData.HarborPositions
  id: HarborPositions
  parent: World.Harbor.HarborData
  langs:
  - csharp
  - vb
  name: HarborPositions
  nameWithType: HarborData.HarborPositions
  fullName: World.Harbor.HarborData.HarborPositions
  type: Field
  source:
    id: HarborPositions
    path: ''
    startLine: 8162
  assemblies:
  - cs.temp.dll
  namespace: World.Harbor
  syntax:
    content: public List<Vector3Int> HarborPositions
    return:
      type: Global.List{Vector3Int}
    content.vb: Public HarborPositions As List(Of Vector3Int)
- uid: World.Harbor.HarborData.EdgeIndex
  commentId: F:World.Harbor.HarborData.EdgeIndex
  id: EdgeIndex
  parent: World.Harbor.HarborData
  langs:
  - csharp
  - vb
  name: EdgeIndex
  nameWithType: HarborData.EdgeIndex
  fullName: World.Harbor.HarborData.EdgeIndex
  type: Field
  source:
    id: EdgeIndex
    path: ''
    startLine: 8163
  assemblies:
  - cs.temp.dll
  namespace: World.Harbor
  syntax:
    content: public int EdgeIndex
    return:
      type: System.Int32
    content.vb: Public EdgeIndex As Integer
- uid: World.Harbor.HarborData.#ctor
  commentId: M:World.Harbor.HarborData.#ctor
  id: '#ctor'
  parent: World.Harbor.HarborData
  langs:
  - csharp
  - vb
  name: HarborData()
  nameWithType: HarborData.HarborData()
  fullName: World.Harbor.HarborData.HarborData()
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 8165
  assemblies:
  - cs.temp.dll
  namespace: World.Harbor
  syntax:
    content: public HarborData()
    content.vb: Public Sub New()
  overload: World.Harbor.HarborData.#ctor*
  nameWithType.vb: HarborData.New()
  fullName.vb: World.Harbor.HarborData.New()
  name.vb: New()
- uid: World.Harbor.HarborData.#ctor(List{Vector3Int},System.Int32)
  commentId: M:World.Harbor.HarborData.#ctor(List{Vector3Int},System.Int32)
  id: '#ctor(List{Vector3Int},System.Int32)'
  parent: World.Harbor.HarborData
  langs:
  - csharp
  - vb
  name: HarborData(List<Vector3Int>, int)
  nameWithType: HarborData.HarborData(List<Vector3Int>, int)
  fullName: World.Harbor.HarborData.HarborData(List<Vector3Int>, int)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 8170
  assemblies:
  - cs.temp.dll
  namespace: World.Harbor
  syntax:
    content: public HarborData(List<Vector3Int> harborPositions, int edgeIndex)
    parameters:
    - id: harborPositions
      type: Global.List{Vector3Int}
    - id: edgeIndex
      type: System.Int32
    content.vb: Public Sub New(harborPositions As List(Of Vector3Int), edgeIndex As Integer)
  overload: World.Harbor.HarborData.#ctor*
  nameWithType.vb: HarborData.New(List(Of Vector3Int), Integer)
  fullName.vb: World.Harbor.HarborData.New(List(Of Vector3Int), Integer)
  name.vb: New(List(Of Vector3Int), Integer)
references:
- uid: World.Harbor
  commentId: N:World.Harbor
  name: World.Harbor
  nameWithType: World.Harbor
  fullName: World.Harbor
  spec.csharp:
  - uid: World
    name: World
  - name: .
  - uid: World.Harbor
    name: Harbor
  spec.vb:
  - uid: World
    name: World
  - name: .
  - uid: World.Harbor
    name: Harbor
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.List{Vector3Int}
  commentId: '!:Global.List{Vector3Int}'
  definition: Global.List`1
  name: List<Vector3Int>
  nameWithType: List<Vector3Int>
  fullName: List<Vector3Int>
  nameWithType.vb: List(Of Vector3Int)
  fullName.vb: List(Of Vector3Int)
  name.vb: List(Of Vector3Int)
  spec.csharp:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - uid: Global.Vector3Int
    name: Vector3Int
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.Vector3Int
    name: Vector3Int
    isExternal: true
  - name: )
- uid: Global.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: World.Harbor.HarborData.#ctor*
  commentId: Overload:World.Harbor.HarborData.#ctor
  name: HarborData
  nameWithType: HarborData.HarborData
  fullName: World.Harbor.HarborData.HarborData
  nameWithType.vb: HarborData.New
  fullName.vb: World.Harbor.HarborData.New
  name.vb: New
