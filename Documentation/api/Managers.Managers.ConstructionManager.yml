### YamlMime:ManagedReference
items:
- uid: Managers.Managers.ConstructionManager
  commentId: T:Managers.Managers.ConstructionManager
  id: ConstructionManager
  parent: Managers.Managers
  children:
  - Managers.Managers.ConstructionManager.AddConstruction(Vector2,System.UInt16,Vector2Int,Managers.SideEnum)
  - Managers.Managers.ConstructionManager.CanBeBuild(Vector2)
  - Managers.Managers.ConstructionManager.ClearDictionary
  - Managers.Managers.ConstructionManager.Constructions
  - Managers.Managers.ConstructionManager.GetAddedMaterial(Vector2)
  - Managers.Managers.ConstructionManager.GetConstructionSide(Vector2)
  - Managers.Managers.ConstructionManager.GetMaterialAmount(Vector2,InventoryItemData)
  - Managers.Managers.ConstructionManager.GetMaterialAmount(Vector2,MaterialType)
  - Managers.Managers.ConstructionManager.Initialize(IslandsDictionaryNames)
  - Managers.Managers.ConstructionManager.Load(IslandsDictionaryNames)
  - Managers.Managers.ConstructionManager.Priority
  - Managers.Managers.ConstructionManager.RemoveConstruction(Vector2)
  - Managers.Managers.ConstructionManager.Save(IslandsDictionaryNames)
  - Managers.Managers.ConstructionManager.SavingPath(IslandsDictionaryNames)
  - Managers.Managers.ConstructionManager.UpdateConstructionAddedMaterials(Vector2,InventoryItemData,System.Byte)
  langs:
  - csharp
  - vb
  name: ConstructionManager
  nameWithType: ConstructionManager
  fullName: Managers.Managers.ConstructionManager
  type: Class
  source:
    id: ConstructionManager
    path: ''
    startLine: 43130
  assemblies:
  - cs.temp.dll
  namespace: Managers.Managers
  syntax:
    content: 'public class ConstructionManager : ScriptableObject, ISavableWithPath'
    content.vb: Public Class ConstructionManager Inherits ScriptableObject Implements ISavableWithPath
  inheritance:
  - System.Object
  implements:
  - Global.ISavableWithPath
- uid: Managers.Managers.ConstructionManager.Constructions
  commentId: F:Managers.Managers.ConstructionManager.Constructions
  id: Constructions
  parent: Managers.Managers.ConstructionManager
  langs:
  - csharp
  - vb
  name: Constructions
  nameWithType: ConstructionManager.Constructions
  fullName: Managers.Managers.ConstructionManager.Constructions
  type: Field
  source:
    id: Constructions
    path: ''
    startLine: 43138
  assemblies:
  - cs.temp.dll
  namespace: Managers.Managers
  syntax:
    content: public Dictionary<Vector2, ConstructionDictionary> Constructions
    return:
      type: Global.Dictionary{Vector2,ConstructionDictionary}
    content.vb: Public Constructions As Dictionary(Of Vector2, ConstructionDictionary)
- uid: Managers.Managers.ConstructionManager.Priority
  commentId: P:Managers.Managers.ConstructionManager.Priority
  id: Priority
  parent: Managers.Managers.ConstructionManager
  langs:
  - csharp
  - vb
  name: Priority
  nameWithType: ConstructionManager.Priority
  fullName: Managers.Managers.ConstructionManager.Priority
  type: Property
  source:
    id: Priority
    path: ''
    startLine: 43140
  assemblies:
  - cs.temp.dll
  namespace: Managers.Managers
  syntax:
    content: public int Priority { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Priority As Integer
  overload: Managers.Managers.ConstructionManager.Priority*
- uid: Managers.Managers.ConstructionManager.SavingPath(IslandsDictionaryNames)
  commentId: M:Managers.Managers.ConstructionManager.SavingPath(IslandsDictionaryNames)
  id: SavingPath(IslandsDictionaryNames)
  parent: Managers.Managers.ConstructionManager
  langs:
  - csharp
  - vb
  name: SavingPath(IslandsDictionaryNames)
  nameWithType: ConstructionManager.SavingPath(IslandsDictionaryNames)
  fullName: Managers.Managers.ConstructionManager.SavingPath(IslandsDictionaryNames)
  type: Method
  source:
    id: SavingPath
    path: ''
    startLine: 43142
  assemblies:
  - cs.temp.dll
  namespace: Managers.Managers
  syntax:
    content: public string SavingPath(IslandsDictionaryNames currentIsland)
    parameters:
    - id: currentIsland
      type: Global.IslandsDictionaryNames
    return:
      type: System.String
    content.vb: Public Function SavingPath(currentIsland As IslandsDictionaryNames) As String
  overload: Managers.Managers.ConstructionManager.SavingPath*
- uid: Managers.Managers.ConstructionManager.AddConstruction(Vector2,System.UInt16,Vector2Int,Managers.SideEnum)
  commentId: M:Managers.Managers.ConstructionManager.AddConstruction(Vector2,System.UInt16,Vector2Int,Managers.SideEnum)
  id: AddConstruction(Vector2,System.UInt16,Vector2Int,Managers.SideEnum)
  parent: Managers.Managers.ConstructionManager
  langs:
  - csharp
  - vb
  name: AddConstruction(Vector2, ushort, Vector2Int, SideEnum)
  nameWithType: ConstructionManager.AddConstruction(Vector2, ushort, Vector2Int, SideEnum)
  fullName: Managers.Managers.ConstructionManager.AddConstruction(Vector2, ushort, Vector2Int, Managers.SideEnum)
  type: Method
  source:
    id: AddConstruction
    path: ''
    startLine: 43149
  assemblies:
  - cs.temp.dll
  namespace: Managers.Managers
  summary: "\nAdds a new building to the list of constructions\n"
  example: []
  syntax:
    content: public void AddConstruction(Vector2 position, ushort ID, Vector2Int bottomLeft, SideEnum side = SideEnum.Down)
    parameters:
    - id: position
      type: Global.Vector2
      description: The position of building
    - id: ID
      type: System.UInt16
      description: id of the building
    - id: bottomLeft
      type: Global.Vector2Int
    - id: side
      type: Managers.SideEnum
    content.vb: Public Sub AddConstruction(position As Vector2, ID As UShort, bottomLeft As Vector2Int, side As SideEnum = SideEnum.Down)
  overload: Managers.Managers.ConstructionManager.AddConstruction*
  nameWithType.vb: ConstructionManager.AddConstruction(Vector2, UShort, Vector2Int, SideEnum)
  fullName.vb: Managers.Managers.ConstructionManager.AddConstruction(Vector2, UShort, Vector2Int, Managers.SideEnum)
  name.vb: AddConstruction(Vector2, UShort, Vector2Int, SideEnum)
- uid: Managers.Managers.ConstructionManager.RemoveConstruction(Vector2)
  commentId: M:Managers.Managers.ConstructionManager.RemoveConstruction(Vector2)
  id: RemoveConstruction(Vector2)
  parent: Managers.Managers.ConstructionManager
  langs:
  - csharp
  - vb
  name: RemoveConstruction(Vector2)
  nameWithType: ConstructionManager.RemoveConstruction(Vector2)
  fullName: Managers.Managers.ConstructionManager.RemoveConstruction(Vector2)
  type: Method
  source:
    id: RemoveConstruction
    path: ''
    startLine: 43159
  assemblies:
  - cs.temp.dll
  namespace: Managers.Managers
  summary: "\nRemoves a building from the list based on its position\n"
  example: []
  syntax:
    content: public void RemoveConstruction(Vector2 position)
    parameters:
    - id: position
      type: Global.Vector2
      description: The position of the building to be removed
    content.vb: Public Sub RemoveConstruction(position As Vector2)
  overload: Managers.Managers.ConstructionManager.RemoveConstruction*
- uid: Managers.Managers.ConstructionManager.GetAddedMaterial(Vector2)
  commentId: M:Managers.Managers.ConstructionManager.GetAddedMaterial(Vector2)
  id: GetAddedMaterial(Vector2)
  parent: Managers.Managers.ConstructionManager
  langs:
  - csharp
  - vb
  name: GetAddedMaterial(Vector2)
  nameWithType: ConstructionManager.GetAddedMaterial(Vector2)
  fullName: Managers.Managers.ConstructionManager.GetAddedMaterial(Vector2)
  type: Method
  source:
    id: GetAddedMaterial
    path: ''
    startLine: 43166
  assemblies:
  - cs.temp.dll
  namespace: Managers.Managers
  summary: "\nRetrieves the list of required materials for a building at the specified position\n"
  example: []
  syntax:
    content: public List<RequiredMaterials> GetAddedMaterial(Vector2 position)
    parameters:
    - id: position
      type: Global.Vector2
      description: The position of the building
    return:
      type: Global.List{RequiredMaterials}
      description: The list of required materials
    content.vb: Public Function GetAddedMaterial(position As Vector2) As List(Of RequiredMaterials)
  overload: Managers.Managers.ConstructionManager.GetAddedMaterial*
- uid: Managers.Managers.ConstructionManager.UpdateConstructionAddedMaterials(Vector2,InventoryItemData,System.Byte)
  commentId: M:Managers.Managers.ConstructionManager.UpdateConstructionAddedMaterials(Vector2,InventoryItemData,System.Byte)
  id: UpdateConstructionAddedMaterials(Vector2,InventoryItemData,System.Byte)
  parent: Managers.Managers.ConstructionManager
  langs:
  - csharp
  - vb
  name: UpdateConstructionAddedMaterials(Vector2, InventoryItemData, byte)
  nameWithType: ConstructionManager.UpdateConstructionAddedMaterials(Vector2, InventoryItemData, byte)
  fullName: Managers.Managers.ConstructionManager.UpdateConstructionAddedMaterials(Vector2, InventoryItemData, byte)
  type: Method
  source:
    id: UpdateConstructionAddedMaterials
    path: ''
    startLine: 43178
  assemblies:
  - cs.temp.dll
  namespace: Managers.Managers
  summary: "\nUpdates the added materials for a building at a specific position\n"
  example: []
  syntax:
    content: public void UpdateConstructionAddedMaterials(Vector2 position, InventoryItemData givenMaterial, byte amount)
    parameters:
    - id: position
      type: Global.Vector2
      description: The position of the building to update
    - id: givenMaterial
      type: Global.InventoryItemData
      description: The material to be added
    - id: amount
      type: System.Byte
      description: The amount of the material to be added
    content.vb: Public Sub UpdateConstructionAddedMaterials(position As Vector2, givenMaterial As InventoryItemData, amount As Byte)
  overload: Managers.Managers.ConstructionManager.UpdateConstructionAddedMaterials*
  nameWithType.vb: ConstructionManager.UpdateConstructionAddedMaterials(Vector2, InventoryItemData, Byte)
  fullName.vb: Managers.Managers.ConstructionManager.UpdateConstructionAddedMaterials(Vector2, InventoryItemData, Byte)
  name.vb: UpdateConstructionAddedMaterials(Vector2, InventoryItemData, Byte)
- uid: Managers.Managers.ConstructionManager.CanBeBuild(Vector2)
  commentId: M:Managers.Managers.ConstructionManager.CanBeBuild(Vector2)
  id: CanBeBuild(Vector2)
  parent: Managers.Managers.ConstructionManager
  langs:
  - csharp
  - vb
  name: CanBeBuild(Vector2)
  nameWithType: ConstructionManager.CanBeBuild(Vector2)
  fullName: Managers.Managers.ConstructionManager.CanBeBuild(Vector2)
  type: Method
  source:
    id: CanBeBuild
    path: ''
    startLine: 43200
  assemblies:
  - cs.temp.dll
  namespace: Managers.Managers
  summary: "\nChecks if the building can be completed\n"
  example: []
  syntax:
    content: public bool CanBeBuild(Vector2 position)
    parameters:
    - id: position
      type: Global.Vector2
      description: The position of the building to check
    return:
      type: System.Boolean
      description: Returns true if the building can be completed, otherwise false
    content.vb: Public Function CanBeBuild(position As Vector2) As Boolean
  overload: Managers.Managers.ConstructionManager.CanBeBuild*
- uid: Managers.Managers.ConstructionManager.GetMaterialAmount(Vector2,InventoryItemData)
  commentId: M:Managers.Managers.ConstructionManager.GetMaterialAmount(Vector2,InventoryItemData)
  id: GetMaterialAmount(Vector2,InventoryItemData)
  parent: Managers.Managers.ConstructionManager
  langs:
  - csharp
  - vb
  name: GetMaterialAmount(Vector2, InventoryItemData)
  nameWithType: ConstructionManager.GetMaterialAmount(Vector2, InventoryItemData)
  fullName: Managers.Managers.ConstructionManager.GetMaterialAmount(Vector2, InventoryItemData)
  type: Method
  source:
    id: GetMaterialAmount
    path: ''
    startLine: 43228
  assemblies:
  - cs.temp.dll
  namespace: Managers.Managers
  summary: "\nGets the amount of a specific material in a building at the given position\nIf the material is not present in the building, it adds the material with an amount of 0\n"
  example: []
  syntax:
    content: public byte GetMaterialAmount(Vector2 position, InventoryItemData material)
    parameters:
    - id: position
      type: Global.Vector2
      description: The position of the building
    - id: material
      type: Global.InventoryItemData
      description: The material for which the amount should be retrieved
    return:
      type: System.Byte
      description: The amount of the specified material in the building at the given position
    content.vb: Public Function GetMaterialAmount(position As Vector2, material As InventoryItemData) As Byte
  overload: Managers.Managers.ConstructionManager.GetMaterialAmount*
- uid: Managers.Managers.ConstructionManager.GetMaterialAmount(Vector2,MaterialType)
  commentId: M:Managers.Managers.ConstructionManager.GetMaterialAmount(Vector2,MaterialType)
  id: GetMaterialAmount(Vector2,MaterialType)
  parent: Managers.Managers.ConstructionManager
  langs:
  - csharp
  - vb
  name: GetMaterialAmount(Vector2, MaterialType)
  nameWithType: ConstructionManager.GetMaterialAmount(Vector2, MaterialType)
  fullName: Managers.Managers.ConstructionManager.GetMaterialAmount(Vector2, MaterialType)
  type: Method
  source:
    id: GetMaterialAmount
    path: ''
    startLine: 43243
  assemblies:
  - cs.temp.dll
  namespace: Managers.Managers
  syntax:
    content: public byte GetMaterialAmount(Vector2 position, MaterialType materialType)
    parameters:
    - id: position
      type: Global.Vector2
    - id: materialType
      type: Global.MaterialType
    return:
      type: System.Byte
    content.vb: Public Function GetMaterialAmount(position As Vector2, materialType As MaterialType) As Byte
  overload: Managers.Managers.ConstructionManager.GetMaterialAmount*
- uid: Managers.Managers.ConstructionManager.GetConstructionSide(Vector2)
  commentId: M:Managers.Managers.ConstructionManager.GetConstructionSide(Vector2)
  id: GetConstructionSide(Vector2)
  parent: Managers.Managers.ConstructionManager
  langs:
  - csharp
  - vb
  name: GetConstructionSide(Vector2)
  nameWithType: ConstructionManager.GetConstructionSide(Vector2)
  fullName: Managers.Managers.ConstructionManager.GetConstructionSide(Vector2)
  type: Method
  source:
    id: GetConstructionSide
    path: ''
    startLine: 43252
  assemblies:
  - cs.temp.dll
  namespace: Managers.Managers
  summary: "\nGet the side of the construction based on its position\n"
  example: []
  syntax:
    content: public SideEnum GetConstructionSide(Vector2 position)
    parameters:
    - id: position
      type: Global.Vector2
    return:
      type: Managers.SideEnum
    content.vb: Public Function GetConstructionSide(position As Vector2) As SideEnum
  overload: Managers.Managers.ConstructionManager.GetConstructionSide*
- uid: Managers.Managers.ConstructionManager.Save(IslandsDictionaryNames)
  commentId: M:Managers.Managers.ConstructionManager.Save(IslandsDictionaryNames)
  id: Save(IslandsDictionaryNames)
  parent: Managers.Managers.ConstructionManager
  langs:
  - csharp
  - vb
  name: Save(IslandsDictionaryNames)
  nameWithType: ConstructionManager.Save(IslandsDictionaryNames)
  fullName: Managers.Managers.ConstructionManager.Save(IslandsDictionaryNames)
  type: Method
  source:
    id: Save
    path: ''
    startLine: 43254
  assemblies:
  - cs.temp.dll
  namespace: Managers.Managers
  syntax:
    content: public UniTask Save(IslandsDictionaryNames curIsland)
    parameters:
    - id: curIsland
      type: Global.IslandsDictionaryNames
    return:
      type: Global.UniTask
    content.vb: Public Function Save(curIsland As IslandsDictionaryNames) As UniTask
  overload: Managers.Managers.ConstructionManager.Save*
- uid: Managers.Managers.ConstructionManager.Load(IslandsDictionaryNames)
  commentId: M:Managers.Managers.ConstructionManager.Load(IslandsDictionaryNames)
  id: Load(IslandsDictionaryNames)
  parent: Managers.Managers.ConstructionManager
  langs:
  - csharp
  - vb
  name: Load(IslandsDictionaryNames)
  nameWithType: ConstructionManager.Load(IslandsDictionaryNames)
  fullName: Managers.Managers.ConstructionManager.Load(IslandsDictionaryNames)
  type: Method
  source:
    id: Load
    path: ''
    startLine: 43261
  assemblies:
  - cs.temp.dll
  namespace: Managers.Managers
  syntax:
    content: public UniTask Load(IslandsDictionaryNames curIsland)
    parameters:
    - id: curIsland
      type: Global.IslandsDictionaryNames
    return:
      type: Global.UniTask
    content.vb: Public Function Load(curIsland As IslandsDictionaryNames) As UniTask
  overload: Managers.Managers.ConstructionManager.Load*
- uid: Managers.Managers.ConstructionManager.Initialize(IslandsDictionaryNames)
  commentId: M:Managers.Managers.ConstructionManager.Initialize(IslandsDictionaryNames)
  id: Initialize(IslandsDictionaryNames)
  parent: Managers.Managers.ConstructionManager
  langs:
  - csharp
  - vb
  name: Initialize(IslandsDictionaryNames)
  nameWithType: ConstructionManager.Initialize(IslandsDictionaryNames)
  fullName: Managers.Managers.ConstructionManager.Initialize(IslandsDictionaryNames)
  type: Method
  source:
    id: Initialize
    path: ''
    startLine: 43275
  assemblies:
  - cs.temp.dll
  namespace: Managers.Managers
  syntax:
    content: public UniTask Initialize(IslandsDictionaryNames curIsland)
    parameters:
    - id: curIsland
      type: Global.IslandsDictionaryNames
    return:
      type: Global.UniTask
    content.vb: Public Function Initialize(curIsland As IslandsDictionaryNames) As UniTask
  overload: Managers.Managers.ConstructionManager.Initialize*
- uid: Managers.Managers.ConstructionManager.ClearDictionary
  commentId: M:Managers.Managers.ConstructionManager.ClearDictionary
  id: ClearDictionary
  parent: Managers.Managers.ConstructionManager
  langs:
  - csharp
  - vb
  name: ClearDictionary()
  nameWithType: ConstructionManager.ClearDictionary()
  fullName: Managers.Managers.ConstructionManager.ClearDictionary()
  type: Method
  source:
    id: ClearDictionary
    path: ''
    startLine: 43291
  assemblies:
  - cs.temp.dll
  namespace: Managers.Managers
  syntax:
    content: public void ClearDictionary()
    content.vb: Public Sub ClearDictionary()
  overload: Managers.Managers.ConstructionManager.ClearDictionary*
references:
- uid: Managers.Managers
  commentId: N:Managers.Managers
  name: Managers.Managers
  nameWithType: Managers.Managers
  fullName: Managers.Managers
  spec.csharp:
  - uid: Managers
    name: Managers
  - name: .
  - uid: Managers.Managers
    name: Managers
  spec.vb:
  - uid: Managers
    name: Managers
  - name: .
  - uid: Managers.Managers
    name: Managers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Global.ISavableWithPath
  isExternal: true
  name: ISavableWithPath
  nameWithType: ISavableWithPath
  fullName: ISavableWithPath
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.Dictionary{Vector2,ConstructionDictionary}
  commentId: '!:Global.Dictionary{Vector2,ConstructionDictionary}'
  definition: Global.Dictionary`2
  name: Dictionary<Vector2, ConstructionDictionary>
  nameWithType: Dictionary<Vector2, ConstructionDictionary>
  fullName: Dictionary<Vector2, ConstructionDictionary>
  nameWithType.vb: Dictionary(Of Vector2, ConstructionDictionary)
  fullName.vb: Dictionary(Of Vector2, ConstructionDictionary)
  name.vb: Dictionary(Of Vector2, ConstructionDictionary)
  spec.csharp:
  - uid: Global.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: <
  - uid: Global.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: Global.ConstructionDictionary
    name: ConstructionDictionary
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Global.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: Global.ConstructionDictionary
    name: ConstructionDictionary
    isExternal: true
  - name: )
- uid: Global.Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: Global.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: <
  - name: ''
  - name: ','
  - name: " "
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: ','
  - name: " "
  - name: ''
  - name: )
- uid: Managers.Managers.ConstructionManager.Priority*
  commentId: Overload:Managers.Managers.ConstructionManager.Priority
  name: Priority
  nameWithType: ConstructionManager.Priority
  fullName: Managers.Managers.ConstructionManager.Priority
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Managers.Managers.ConstructionManager.SavingPath*
  commentId: Overload:Managers.Managers.ConstructionManager.SavingPath
  name: SavingPath
  nameWithType: ConstructionManager.SavingPath
  fullName: Managers.Managers.ConstructionManager.SavingPath
- uid: Global.IslandsDictionaryNames
  isExternal: true
  name: IslandsDictionaryNames
  nameWithType: IslandsDictionaryNames
  fullName: IslandsDictionaryNames
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Managers.Managers.ConstructionManager.AddConstruction*
  commentId: Overload:Managers.Managers.ConstructionManager.AddConstruction
  name: AddConstruction
  nameWithType: ConstructionManager.AddConstruction
  fullName: Managers.Managers.ConstructionManager.AddConstruction
- uid: Global.Vector2
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Vector2
- uid: System.UInt16
  commentId: T:System.UInt16
  parent: System
  isExternal: true
  name: ushort
  nameWithType: ushort
  fullName: ushort
  nameWithType.vb: UShort
  fullName.vb: UShort
  name.vb: UShort
- uid: Global.Vector2Int
  isExternal: true
  name: Vector2Int
  nameWithType: Vector2Int
  fullName: Vector2Int
- uid: Managers.SideEnum
  commentId: T:Managers.SideEnum
  parent: Managers
  name: SideEnum
  nameWithType: SideEnum
  fullName: Managers.SideEnum
- uid: Managers
  commentId: N:Managers
  name: Managers
  nameWithType: Managers
  fullName: Managers
- uid: Managers.Managers.ConstructionManager.RemoveConstruction*
  commentId: Overload:Managers.Managers.ConstructionManager.RemoveConstruction
  name: RemoveConstruction
  nameWithType: ConstructionManager.RemoveConstruction
  fullName: Managers.Managers.ConstructionManager.RemoveConstruction
- uid: Managers.Managers.ConstructionManager.GetAddedMaterial*
  commentId: Overload:Managers.Managers.ConstructionManager.GetAddedMaterial
  name: GetAddedMaterial
  nameWithType: ConstructionManager.GetAddedMaterial
  fullName: Managers.Managers.ConstructionManager.GetAddedMaterial
- uid: Global.List{RequiredMaterials}
  commentId: '!:Global.List{RequiredMaterials}'
  definition: Global.List`1
  name: List<RequiredMaterials>
  nameWithType: List<RequiredMaterials>
  fullName: List<RequiredMaterials>
  nameWithType.vb: List(Of RequiredMaterials)
  fullName.vb: List(Of RequiredMaterials)
  name.vb: List(Of RequiredMaterials)
  spec.csharp:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - uid: Global.RequiredMaterials
    name: RequiredMaterials
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.RequiredMaterials
    name: RequiredMaterials
    isExternal: true
  - name: )
- uid: Global.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: Managers.Managers.ConstructionManager.UpdateConstructionAddedMaterials*
  commentId: Overload:Managers.Managers.ConstructionManager.UpdateConstructionAddedMaterials
  name: UpdateConstructionAddedMaterials
  nameWithType: ConstructionManager.UpdateConstructionAddedMaterials
  fullName: Managers.Managers.ConstructionManager.UpdateConstructionAddedMaterials
- uid: Global.InventoryItemData
  isExternal: true
  name: InventoryItemData
  nameWithType: InventoryItemData
  fullName: InventoryItemData
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: byte
  nameWithType: byte
  fullName: byte
  nameWithType.vb: Byte
  fullName.vb: Byte
  name.vb: Byte
- uid: Managers.Managers.ConstructionManager.CanBeBuild*
  commentId: Overload:Managers.Managers.ConstructionManager.CanBeBuild
  name: CanBeBuild
  nameWithType: ConstructionManager.CanBeBuild
  fullName: Managers.Managers.ConstructionManager.CanBeBuild
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Managers.Managers.ConstructionManager.GetMaterialAmount*
  commentId: Overload:Managers.Managers.ConstructionManager.GetMaterialAmount
  name: GetMaterialAmount
  nameWithType: ConstructionManager.GetMaterialAmount
  fullName: Managers.Managers.ConstructionManager.GetMaterialAmount
- uid: Global.MaterialType
  isExternal: true
  name: MaterialType
  nameWithType: MaterialType
  fullName: MaterialType
- uid: Managers.Managers.ConstructionManager.GetConstructionSide*
  commentId: Overload:Managers.Managers.ConstructionManager.GetConstructionSide
  name: GetConstructionSide
  nameWithType: ConstructionManager.GetConstructionSide
  fullName: Managers.Managers.ConstructionManager.GetConstructionSide
- uid: Managers.Managers.ConstructionManager.Save*
  commentId: Overload:Managers.Managers.ConstructionManager.Save
  name: Save
  nameWithType: ConstructionManager.Save
  fullName: Managers.Managers.ConstructionManager.Save
- uid: Global.UniTask
  isExternal: true
  name: UniTask
  nameWithType: UniTask
  fullName: UniTask
- uid: Managers.Managers.ConstructionManager.Load*
  commentId: Overload:Managers.Managers.ConstructionManager.Load
  name: Load
  nameWithType: ConstructionManager.Load
  fullName: Managers.Managers.ConstructionManager.Load
- uid: Managers.Managers.ConstructionManager.Initialize*
  commentId: Overload:Managers.Managers.ConstructionManager.Initialize
  name: Initialize
  nameWithType: ConstructionManager.Initialize
  fullName: Managers.Managers.ConstructionManager.Initialize
- uid: Managers.Managers.ConstructionManager.ClearDictionary*
  commentId: Overload:Managers.Managers.ConstructionManager.ClearDictionary
  name: ClearDictionary
  nameWithType: ConstructionManager.ClearDictionary
  fullName: Managers.Managers.ConstructionManager.ClearDictionary
