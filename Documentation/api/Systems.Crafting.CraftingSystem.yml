### YamlMime:ManagedReference
items:
- uid: Systems.Crafting.CraftingSystem
  commentId: T:Systems.Crafting.CraftingSystem
  id: CraftingSystem
  parent: Systems.Crafting
  children:
  - Systems.Crafting.CraftingSystem.CanBeCrafted(List{NeededMaterial},BackpackInventory,HotBarInventory)
  - Systems.Crafting.CraftingSystem.Craft(CraftingRecipeSO,BackpackInventory,HotBarInventory,Transform)
  - Systems.Crafting.CraftingSystem.DecreaseItem(InventoryItemData,System.Int32,BackpackInventory,HotBarInventory)
  - Systems.Crafting.CraftingSystem.DecreaseItem(MaterialType,System.Int32,BackpackInventory,HotBarInventory)
  - Systems.Crafting.CraftingSystem.ItemAmountInInventory(InventoryItemData,BackpackInventory,HotBarInventory)
  - Systems.Crafting.CraftingSystem.ItemAmountInInventory(MaterialType,BackpackInventory,HotBarInventory)
  - Systems.Crafting.CraftingSystem.OnInventoryFull
  - Systems.Crafting.CraftingSystem.OnItemCrafted
  langs:
  - csharp
  - vb
  name: CraftingSystem
  nameWithType: CraftingSystem
  fullName: Systems.Crafting.CraftingSystem
  type: Class
  source:
    id: CraftingSystem
    path: ''
    startLine: 18999
  assemblies:
  - cs.temp.dll
  namespace: Systems.Crafting
  syntax:
    content: public static class CraftingSystem
    content.vb: Public Module CraftingSystem
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Systems.Crafting.CraftingSystem.OnInventoryFull
  commentId: F:Systems.Crafting.CraftingSystem.OnInventoryFull
  id: OnInventoryFull
  parent: Systems.Crafting.CraftingSystem
  langs:
  - csharp
  - vb
  name: OnInventoryFull
  nameWithType: CraftingSystem.OnInventoryFull
  fullName: Systems.Crafting.CraftingSystem.OnInventoryFull
  type: Field
  source:
    id: OnInventoryFull
    path: ''
    startLine: 19001
  assemblies:
  - cs.temp.dll
  namespace: Systems.Crafting
  syntax:
    content: public static Action OnInventoryFull
    return:
      type: Global.Action
    content.vb: Public Shared OnInventoryFull As Action
- uid: Systems.Crafting.CraftingSystem.OnItemCrafted
  commentId: F:Systems.Crafting.CraftingSystem.OnItemCrafted
  id: OnItemCrafted
  parent: Systems.Crafting.CraftingSystem
  langs:
  - csharp
  - vb
  name: OnItemCrafted
  nameWithType: CraftingSystem.OnItemCrafted
  fullName: Systems.Crafting.CraftingSystem.OnItemCrafted
  type: Field
  source:
    id: OnItemCrafted
    path: ''
    startLine: 19003
  assemblies:
  - cs.temp.dll
  namespace: Systems.Crafting
  syntax:
    content: public static UnityAction OnItemCrafted
    return:
      type: Global.UnityAction
    content.vb: Public Shared OnItemCrafted As UnityAction
- uid: Systems.Crafting.CraftingSystem.Craft(CraftingRecipeSO,BackpackInventory,HotBarInventory,Transform)
  commentId: M:Systems.Crafting.CraftingSystem.Craft(CraftingRecipeSO,BackpackInventory,HotBarInventory,Transform)
  id: Craft(CraftingRecipeSO,BackpackInventory,HotBarInventory,Transform)
  parent: Systems.Crafting.CraftingSystem
  langs:
  - csharp
  - vb
  name: Craft(CraftingRecipeSO, BackpackInventory, HotBarInventory, Transform)
  nameWithType: CraftingSystem.Craft(CraftingRecipeSO, BackpackInventory, HotBarInventory, Transform)
  fullName: Systems.Crafting.CraftingSystem.Craft(CraftingRecipeSO, BackpackInventory, HotBarInventory, Transform)
  type: Method
  source:
    id: Craft
    path: ''
    startLine: 19007
  assemblies:
  - cs.temp.dll
  namespace: Systems.Crafting
  summary: Craft the recipe
  example: []
  syntax:
    content: public static void Craft(CraftingRecipeSO recipe, BackpackInventory backpackInventory, HotBarInventory hotBarInventory, Transform playerTransform)
    parameters:
    - id: recipe
      type: Global.CraftingRecipeSO
      description: Which recipe to craft
    - id: backpackInventory
      type: Global.BackpackInventory
    - id: hotBarInventory
      type: Global.HotBarInventory
    - id: playerTransform
      type: Global.Transform
    content.vb: Public Shared Sub Craft(recipe As CraftingRecipeSO, backpackInventory As BackpackInventory, hotBarInventory As HotBarInventory, playerTransform As Transform)
  overload: Systems.Crafting.CraftingSystem.Craft*
- uid: Systems.Crafting.CraftingSystem.ItemAmountInInventory(InventoryItemData,BackpackInventory,HotBarInventory)
  commentId: M:Systems.Crafting.CraftingSystem.ItemAmountInInventory(InventoryItemData,BackpackInventory,HotBarInventory)
  id: ItemAmountInInventory(InventoryItemData,BackpackInventory,HotBarInventory)
  parent: Systems.Crafting.CraftingSystem
  langs:
  - csharp
  - vb
  name: ItemAmountInInventory(InventoryItemData, BackpackInventory, HotBarInventory)
  nameWithType: CraftingSystem.ItemAmountInInventory(InventoryItemData, BackpackInventory, HotBarInventory)
  fullName: Systems.Crafting.CraftingSystem.ItemAmountInInventory(InventoryItemData, BackpackInventory, HotBarInventory)
  type: Method
  source:
    id: ItemAmountInInventory
    path: ''
    startLine: 19031
  assemblies:
  - cs.temp.dll
  namespace: Systems.Crafting
  summary: Checks the big and quick inventory if they contains the item and what amount
  example: []
  syntax:
    content: public static int ItemAmountInInventory(InventoryItemData item, BackpackInventory backpackInventory, HotBarInventory hotBarInventory)
    parameters:
    - id: item
      type: Global.InventoryItemData
      description: Which item
    - id: backpackInventory
      type: Global.BackpackInventory
    - id: hotBarInventory
      type: Global.HotBarInventory
    return:
      type: System.Int32
      description: Item amount in both inventories
    content.vb: Public Shared Function ItemAmountInInventory(item As InventoryItemData, backpackInventory As BackpackInventory, hotBarInventory As HotBarInventory) As Integer
  overload: Systems.Crafting.CraftingSystem.ItemAmountInInventory*
- uid: Systems.Crafting.CraftingSystem.ItemAmountInInventory(MaterialType,BackpackInventory,HotBarInventory)
  commentId: M:Systems.Crafting.CraftingSystem.ItemAmountInInventory(MaterialType,BackpackInventory,HotBarInventory)
  id: ItemAmountInInventory(MaterialType,BackpackInventory,HotBarInventory)
  parent: Systems.Crafting.CraftingSystem
  langs:
  - csharp
  - vb
  name: ItemAmountInInventory(MaterialType, BackpackInventory, HotBarInventory)
  nameWithType: CraftingSystem.ItemAmountInInventory(MaterialType, BackpackInventory, HotBarInventory)
  fullName: Systems.Crafting.CraftingSystem.ItemAmountInInventory(MaterialType, BackpackInventory, HotBarInventory)
  type: Method
  source:
    id: ItemAmountInInventory
    path: ''
    startLine: 19044
  assemblies:
  - cs.temp.dll
  namespace: Systems.Crafting
  summary: Checks the big and quick inventory if they contains the material amount and what amount
  example: []
  syntax:
    content: public static int ItemAmountInInventory(MaterialType materialType, BackpackInventory backpackInventory, HotBarInventory hotBarInventory)
    parameters:
    - id: materialType
      type: Global.MaterialType
    - id: backpackInventory
      type: Global.BackpackInventory
    - id: hotBarInventory
      type: Global.HotBarInventory
    return:
      type: System.Int32
      description: Item amount in both inventories
    content.vb: Public Shared Function ItemAmountInInventory(materialType As MaterialType, backpackInventory As BackpackInventory, hotBarInventory As HotBarInventory) As Integer
  overload: Systems.Crafting.CraftingSystem.ItemAmountInInventory*
- uid: Systems.Crafting.CraftingSystem.DecreaseItem(InventoryItemData,System.Int32,BackpackInventory,HotBarInventory)
  commentId: M:Systems.Crafting.CraftingSystem.DecreaseItem(InventoryItemData,System.Int32,BackpackInventory,HotBarInventory)
  id: DecreaseItem(InventoryItemData,System.Int32,BackpackInventory,HotBarInventory)
  parent: Systems.Crafting.CraftingSystem
  langs:
  - csharp
  - vb
  name: DecreaseItem(InventoryItemData, int, BackpackInventory, HotBarInventory)
  nameWithType: CraftingSystem.DecreaseItem(InventoryItemData, int, BackpackInventory, HotBarInventory)
  fullName: Systems.Crafting.CraftingSystem.DecreaseItem(InventoryItemData, int, BackpackInventory, HotBarInventory)
  type: Method
  source:
    id: DecreaseItem
    path: ''
    startLine: 19102
  assemblies:
  - cs.temp.dll
  namespace: Systems.Crafting
  summary: "\nDecreases the item by the amount\n"
  example: []
  syntax:
    content: public static void DecreaseItem(InventoryItemData item, int amount, BackpackInventory backpackInventory, HotBarInventory hotBarInventory)
    parameters:
    - id: item
      type: Global.InventoryItemData
      description: What item
    - id: amount
      type: System.Int32
      description: The amount
    - id: backpackInventory
      type: Global.BackpackInventory
    - id: hotBarInventory
      type: Global.HotBarInventory
    content.vb: Public Shared Sub DecreaseItem(item As InventoryItemData, amount As Integer, backpackInventory As BackpackInventory, hotBarInventory As HotBarInventory)
  overload: Systems.Crafting.CraftingSystem.DecreaseItem*
  nameWithType.vb: CraftingSystem.DecreaseItem(InventoryItemData, Integer, BackpackInventory, HotBarInventory)
  fullName.vb: Systems.Crafting.CraftingSystem.DecreaseItem(InventoryItemData, Integer, BackpackInventory, HotBarInventory)
  name.vb: DecreaseItem(InventoryItemData, Integer, BackpackInventory, HotBarInventory)
- uid: Systems.Crafting.CraftingSystem.DecreaseItem(MaterialType,System.Int32,BackpackInventory,HotBarInventory)
  commentId: M:Systems.Crafting.CraftingSystem.DecreaseItem(MaterialType,System.Int32,BackpackInventory,HotBarInventory)
  id: DecreaseItem(MaterialType,System.Int32,BackpackInventory,HotBarInventory)
  parent: Systems.Crafting.CraftingSystem
  langs:
  - csharp
  - vb
  name: DecreaseItem(MaterialType, int, BackpackInventory, HotBarInventory)
  nameWithType: CraftingSystem.DecreaseItem(MaterialType, int, BackpackInventory, HotBarInventory)
  fullName: Systems.Crafting.CraftingSystem.DecreaseItem(MaterialType, int, BackpackInventory, HotBarInventory)
  type: Method
  source:
    id: DecreaseItem
    path: ''
    startLine: 19134
  assemblies:
  - cs.temp.dll
  namespace: Systems.Crafting
  summary: "\nDecreases the material type by the amount\n"
  example: []
  syntax:
    content: public static void DecreaseItem(MaterialType item, int amount, BackpackInventory backpackInventory, HotBarInventory hotBarInventory)
    parameters:
    - id: item
      type: Global.MaterialType
      description: What type
    - id: amount
      type: System.Int32
      description: The amount
    - id: backpackInventory
      type: Global.BackpackInventory
    - id: hotBarInventory
      type: Global.HotBarInventory
    content.vb: Public Shared Sub DecreaseItem(item As MaterialType, amount As Integer, backpackInventory As BackpackInventory, hotBarInventory As HotBarInventory)
  overload: Systems.Crafting.CraftingSystem.DecreaseItem*
  nameWithType.vb: CraftingSystem.DecreaseItem(MaterialType, Integer, BackpackInventory, HotBarInventory)
  fullName.vb: Systems.Crafting.CraftingSystem.DecreaseItem(MaterialType, Integer, BackpackInventory, HotBarInventory)
  name.vb: DecreaseItem(MaterialType, Integer, BackpackInventory, HotBarInventory)
- uid: Systems.Crafting.CraftingSystem.CanBeCrafted(List{NeededMaterial},BackpackInventory,HotBarInventory)
  commentId: M:Systems.Crafting.CraftingSystem.CanBeCrafted(List{NeededMaterial},BackpackInventory,HotBarInventory)
  id: CanBeCrafted(List{NeededMaterial},BackpackInventory,HotBarInventory)
  parent: Systems.Crafting.CraftingSystem
  langs:
  - csharp
  - vb
  name: CanBeCrafted(List<NeededMaterial>, BackpackInventory, HotBarInventory)
  nameWithType: CraftingSystem.CanBeCrafted(List<NeededMaterial>, BackpackInventory, HotBarInventory)
  fullName: Systems.Crafting.CraftingSystem.CanBeCrafted(List<NeededMaterial>, BackpackInventory, HotBarInventory)
  type: Method
  source:
    id: CanBeCrafted
    path: ''
    startLine: 19204
  assemblies:
  - cs.temp.dll
  namespace: Systems.Crafting
  summary: Check if the item can be crafted based on needed materials
  example: []
  syntax:
    content: public static bool CanBeCrafted(List<NeededMaterial> neededMaterials, BackpackInventory backpackInventory, HotBarInventory hotBarInventory)
    parameters:
    - id: neededMaterials
      type: Global.List{NeededMaterial}
      description: List with needed materials
    - id: backpackInventory
      type: Global.BackpackInventory
    - id: hotBarInventory
      type: Global.HotBarInventory
    return:
      type: System.Boolean
      description: True if can be crafted, false if cannot be crafted
    content.vb: Public Shared Function CanBeCrafted(neededMaterials As List(Of NeededMaterial), backpackInventory As BackpackInventory, hotBarInventory As HotBarInventory) As Boolean
  overload: Systems.Crafting.CraftingSystem.CanBeCrafted*
  nameWithType.vb: CraftingSystem.CanBeCrafted(List(Of NeededMaterial), BackpackInventory, HotBarInventory)
  fullName.vb: Systems.Crafting.CraftingSystem.CanBeCrafted(List(Of NeededMaterial), BackpackInventory, HotBarInventory)
  name.vb: CanBeCrafted(List(Of NeededMaterial), BackpackInventory, HotBarInventory)
references:
- uid: Systems.Crafting
  commentId: N:Systems.Crafting
  name: Systems.Crafting
  nameWithType: Systems.Crafting
  fullName: Systems.Crafting
  spec.csharp:
  - uid: Systems
    name: Systems
  - name: .
  - uid: Systems.Crafting
    name: Crafting
  spec.vb:
  - uid: Systems
    name: Systems
  - name: .
  - uid: Systems.Crafting
    name: Crafting
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.Action
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: Action
- uid: Global.UnityAction
  isExternal: true
  name: UnityAction
  nameWithType: UnityAction
  fullName: UnityAction
- uid: Systems.Crafting.CraftingSystem.Craft*
  commentId: Overload:Systems.Crafting.CraftingSystem.Craft
  name: Craft
  nameWithType: CraftingSystem.Craft
  fullName: Systems.Crafting.CraftingSystem.Craft
- uid: Global.CraftingRecipeSO
  isExternal: true
  name: CraftingRecipeSO
  nameWithType: CraftingRecipeSO
  fullName: CraftingRecipeSO
- uid: Global.BackpackInventory
  isExternal: true
  name: BackpackInventory
  nameWithType: BackpackInventory
  fullName: BackpackInventory
- uid: Global.HotBarInventory
  isExternal: true
  name: HotBarInventory
  nameWithType: HotBarInventory
  fullName: HotBarInventory
- uid: Global.Transform
  isExternal: true
  name: Transform
  nameWithType: Transform
  fullName: Transform
- uid: Systems.Crafting.CraftingSystem.ItemAmountInInventory*
  commentId: Overload:Systems.Crafting.CraftingSystem.ItemAmountInInventory
  name: ItemAmountInInventory
  nameWithType: CraftingSystem.ItemAmountInInventory
  fullName: Systems.Crafting.CraftingSystem.ItemAmountInInventory
- uid: Global.InventoryItemData
  isExternal: true
  name: InventoryItemData
  nameWithType: InventoryItemData
  fullName: InventoryItemData
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Global.MaterialType
  isExternal: true
  name: MaterialType
  nameWithType: MaterialType
  fullName: MaterialType
- uid: Systems.Crafting.CraftingSystem.DecreaseItem*
  commentId: Overload:Systems.Crafting.CraftingSystem.DecreaseItem
  name: DecreaseItem
  nameWithType: CraftingSystem.DecreaseItem
  fullName: Systems.Crafting.CraftingSystem.DecreaseItem
- uid: Systems.Crafting.CraftingSystem.CanBeCrafted*
  commentId: Overload:Systems.Crafting.CraftingSystem.CanBeCrafted
  name: CanBeCrafted
  nameWithType: CraftingSystem.CanBeCrafted
  fullName: Systems.Crafting.CraftingSystem.CanBeCrafted
- uid: Global.List{NeededMaterial}
  commentId: '!:Global.List{NeededMaterial}'
  definition: Global.List`1
  name: List<NeededMaterial>
  nameWithType: List<NeededMaterial>
  fullName: List<NeededMaterial>
  nameWithType.vb: List(Of NeededMaterial)
  fullName.vb: List(Of NeededMaterial)
  name.vb: List(Of NeededMaterial)
  spec.csharp:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - uid: Global.NeededMaterial
    name: NeededMaterial
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.NeededMaterial
    name: NeededMaterial
    isExternal: true
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
