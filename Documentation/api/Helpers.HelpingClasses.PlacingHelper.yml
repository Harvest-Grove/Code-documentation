### YamlMime:ManagedReference
items:
- uid: Helpers.HelpingClasses.PlacingHelper
  commentId: T:Helpers.HelpingClasses.PlacingHelper
  id: PlacingHelper
  parent: Helpers.HelpingClasses
  children:
  - Helpers.HelpingClasses.PlacingHelper.AddThrough(Vector2,BuildingSO,MapBuildingsDataSO)
  - Helpers.HelpingClasses.PlacingHelper.ClearPreviousTiles(BuildingSO,Vector2Int,Tilemap,System.Int32,Vector2Int)
  - Helpers.HelpingClasses.PlacingHelper.EnableBuildingMap(BuildingSO)
  - Helpers.HelpingClasses.PlacingHelper.GridToWorldPosition(Vector2Int,Vector2)
  - Helpers.HelpingClasses.PlacingHelper.IsTaken(Vector3Int,TilemapStructure)
  - Helpers.HelpingClasses.PlacingHelper.PlaceMoreTiles(SideEnum,Vector2Int,TilemapStructure,Vector2Int,System.Int32)
  - Helpers.HelpingClasses.PlacingHelper.SetTakenTiles(BuildingSO,System.Int32,Vector2Int,TilemapStructure,Vector2Int)
  - Helpers.HelpingClasses.PlacingHelper.WorldToGridPosition(Vector3,Vector2)
  langs:
  - csharp
  - vb
  name: PlacingHelper
  nameWithType: PlacingHelper
  fullName: Helpers.HelpingClasses.PlacingHelper
  type: Class
  source:
    id: PlacingHelper
    path: ''
    startLine: 46446
  assemblies:
  - cs.temp.dll
  namespace: Helpers.HelpingClasses
  syntax:
    content: public static class PlacingHelper
    content.vb: Public Module PlacingHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Helpers.HelpingClasses.PlacingHelper.IsTaken(Vector3Int,TilemapStructure)
  commentId: M:Helpers.HelpingClasses.PlacingHelper.IsTaken(Vector3Int,TilemapStructure)
  id: IsTaken(Vector3Int,TilemapStructure)
  parent: Helpers.HelpingClasses.PlacingHelper
  langs:
  - csharp
  - vb
  name: IsTaken(Vector3Int, TilemapStructure)
  nameWithType: PlacingHelper.IsTaken(Vector3Int, TilemapStructure)
  fullName: Helpers.HelpingClasses.PlacingHelper.IsTaken(Vector3Int, TilemapStructure)
  type: Method
  source:
    id: IsTaken
    path: ''
    startLine: 46451
  assemblies:
  - cs.temp.dll
  namespace: Helpers.HelpingClasses
  summary: "\nCheck if the tile on position is take or not\n"
  example: []
  syntax:
    content: public static bool IsTaken(Vector3Int tilePosition, TilemapStructure buildingTilemap)
    parameters:
    - id: tilePosition
      type: Global.Vector3Int
    - id: buildingTilemap
      type: Global.TilemapStructure
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsTaken(tilePosition As Vector3Int, buildingTilemap As TilemapStructure) As Boolean
  overload: Helpers.HelpingClasses.PlacingHelper.IsTaken*
- uid: Helpers.HelpingClasses.PlacingHelper.WorldToGridPosition(Vector3,Vector2)
  commentId: M:Helpers.HelpingClasses.PlacingHelper.WorldToGridPosition(Vector3,Vector2)
  id: WorldToGridPosition(Vector3,Vector2)
  parent: Helpers.HelpingClasses.PlacingHelper
  langs:
  - csharp
  - vb
  name: WorldToGridPosition(Vector3, Vector2)
  nameWithType: PlacingHelper.WorldToGridPosition(Vector3, Vector2)
  fullName: Helpers.HelpingClasses.PlacingHelper.WorldToGridPosition(Vector3, Vector2)
  type: Method
  source:
    id: WorldToGridPosition
    path: ''
    startLine: 46454
  assemblies:
  - cs.temp.dll
  namespace: Helpers.HelpingClasses
  syntax:
    content: public static Vector2Int WorldToGridPosition(Vector3 worldPosition, Vector2 cellSize)
    parameters:
    - id: worldPosition
      type: Global.Vector3
    - id: cellSize
      type: Global.Vector2
    return:
      type: Global.Vector2Int
    content.vb: Public Shared Function WorldToGridPosition(worldPosition As Vector3, cellSize As Vector2) As Vector2Int
  overload: Helpers.HelpingClasses.PlacingHelper.WorldToGridPosition*
- uid: Helpers.HelpingClasses.PlacingHelper.GridToWorldPosition(Vector2Int,Vector2)
  commentId: M:Helpers.HelpingClasses.PlacingHelper.GridToWorldPosition(Vector2Int,Vector2)
  id: GridToWorldPosition(Vector2Int,Vector2)
  parent: Helpers.HelpingClasses.PlacingHelper
  langs:
  - csharp
  - vb
  name: GridToWorldPosition(Vector2Int, Vector2)
  nameWithType: PlacingHelper.GridToWorldPosition(Vector2Int, Vector2)
  fullName: Helpers.HelpingClasses.PlacingHelper.GridToWorldPosition(Vector2Int, Vector2)
  type: Method
  source:
    id: GridToWorldPosition
    path: ''
    startLine: 46456
  assemblies:
  - cs.temp.dll
  namespace: Helpers.HelpingClasses
  syntax:
    content: public static Vector3 GridToWorldPosition(Vector2Int gridPosition, Vector2 cellSize)
    parameters:
    - id: gridPosition
      type: Global.Vector2Int
    - id: cellSize
      type: Global.Vector2
    return:
      type: Global.Vector3
    content.vb: Public Shared Function GridToWorldPosition(gridPosition As Vector2Int, cellSize As Vector2) As Vector3
  overload: Helpers.HelpingClasses.PlacingHelper.GridToWorldPosition*
- uid: Helpers.HelpingClasses.PlacingHelper.AddThrough(Vector2,BuildingSO,MapBuildingsDataSO)
  commentId: M:Helpers.HelpingClasses.PlacingHelper.AddThrough(Vector2,BuildingSO,MapBuildingsDataSO)
  id: AddThrough(Vector2,BuildingSO,MapBuildingsDataSO)
  parent: Helpers.HelpingClasses.PlacingHelper
  langs:
  - csharp
  - vb
  name: AddThrough(Vector2, BuildingSO, MapBuildingsDataSO)
  nameWithType: PlacingHelper.AddThrough(Vector2, BuildingSO, MapBuildingsDataSO)
  fullName: Helpers.HelpingClasses.PlacingHelper.AddThrough(Vector2, BuildingSO, MapBuildingsDataSO)
  type: Method
  source:
    id: AddThrough
    path: ''
    startLine: 46462
  assemblies:
  - cs.temp.dll
  namespace: Helpers.HelpingClasses
  summary: "\nAdds the Trough to the MapBuildingData \n"
  example: []
  syntax:
    content: public static void AddThrough(Vector2 gridPosition, BuildingSO currentBuildingSO, MapBuildingsDataSO mapBuildingsData)
    parameters:
    - id: gridPosition
      type: Global.Vector2
    - id: currentBuildingSO
      type: Global.BuildingSO
    - id: mapBuildingsData
      type: Global.MapBuildingsDataSO
    content.vb: Public Shared Sub AddThrough(gridPosition As Vector2, currentBuildingSO As BuildingSO, mapBuildingsData As MapBuildingsDataSO)
  overload: Helpers.HelpingClasses.PlacingHelper.AddThrough*
- uid: Helpers.HelpingClasses.PlacingHelper.ClearPreviousTiles(BuildingSO,Vector2Int,Tilemap,System.Int32,Vector2Int)
  commentId: M:Helpers.HelpingClasses.PlacingHelper.ClearPreviousTiles(BuildingSO,Vector2Int,Tilemap,System.Int32,Vector2Int)
  id: ClearPreviousTiles(BuildingSO,Vector2Int,Tilemap,System.Int32,Vector2Int)
  parent: Helpers.HelpingClasses.PlacingHelper
  langs:
  - csharp
  - vb
  name: ClearPreviousTiles(BuildingSO, Vector2Int, Tilemap, int, Vector2Int)
  nameWithType: PlacingHelper.ClearPreviousTiles(BuildingSO, Vector2Int, Tilemap, int, Vector2Int)
  fullName: Helpers.HelpingClasses.PlacingHelper.ClearPreviousTiles(BuildingSO, Vector2Int, Tilemap, int, Vector2Int)
  type: Method
  source:
    id: ClearPreviousTiles
    path: ''
    startLine: 46478
  assemblies:
  - cs.temp.dll
  namespace: Helpers.HelpingClasses
  summary: "\nSet the previous tiles to null\n"
  example: []
  syntax:
    content: public static void ClearPreviousTiles(BuildingSO currentBuildingSO, Vector2Int lastGridPosition, Tilemap tilemap, int currentSpriteIndex, Vector2Int currentBuildingSize)
    parameters:
    - id: currentBuildingSO
      type: Global.BuildingSO
    - id: lastGridPosition
      type: Global.Vector2Int
    - id: tilemap
      type: Global.Tilemap
    - id: currentSpriteIndex
      type: System.Int32
    - id: currentBuildingSize
      type: Global.Vector2Int
    content.vb: Public Shared Sub ClearPreviousTiles(currentBuildingSO As BuildingSO, lastGridPosition As Vector2Int, tilemap As Tilemap, currentSpriteIndex As Integer, currentBuildingSize As Vector2Int)
  overload: Helpers.HelpingClasses.PlacingHelper.ClearPreviousTiles*
  nameWithType.vb: PlacingHelper.ClearPreviousTiles(BuildingSO, Vector2Int, Tilemap, Integer, Vector2Int)
  fullName.vb: Helpers.HelpingClasses.PlacingHelper.ClearPreviousTiles(BuildingSO, Vector2Int, Tilemap, Integer, Vector2Int)
  name.vb: ClearPreviousTiles(BuildingSO, Vector2Int, Tilemap, Integer, Vector2Int)
- uid: Helpers.HelpingClasses.PlacingHelper.SetTakenTiles(BuildingSO,System.Int32,Vector2Int,TilemapStructure,Vector2Int)
  commentId: M:Helpers.HelpingClasses.PlacingHelper.SetTakenTiles(BuildingSO,System.Int32,Vector2Int,TilemapStructure,Vector2Int)
  id: SetTakenTiles(BuildingSO,System.Int32,Vector2Int,TilemapStructure,Vector2Int)
  parent: Helpers.HelpingClasses.PlacingHelper
  langs:
  - csharp
  - vb
  name: SetTakenTiles(BuildingSO, int, Vector2Int, TilemapStructure, Vector2Int)
  nameWithType: PlacingHelper.SetTakenTiles(BuildingSO, int, Vector2Int, TilemapStructure, Vector2Int)
  fullName: Helpers.HelpingClasses.PlacingHelper.SetTakenTiles(BuildingSO, int, Vector2Int, TilemapStructure, Vector2Int)
  type: Method
  source:
    id: SetTakenTiles
    path: ''
    startLine: 46503
  assemblies:
  - cs.temp.dll
  namespace: Helpers.HelpingClasses
  summary: "\nSet tiles to the TilemapStructure\n"
  example: []
  syntax:
    content: public static void SetTakenTiles(BuildingSO currentBuildingSO, int currentSpriteIndex, Vector2Int currentBuildingSize, TilemapStructure buildingTilemap, Vector2Int gridPosition)
    parameters:
    - id: currentBuildingSO
      type: Global.BuildingSO
    - id: currentSpriteIndex
      type: System.Int32
    - id: currentBuildingSize
      type: Global.Vector2Int
    - id: buildingTilemap
      type: Global.TilemapStructure
    - id: gridPosition
      type: Global.Vector2Int
    content.vb: Public Shared Sub SetTakenTiles(currentBuildingSO As BuildingSO, currentSpriteIndex As Integer, currentBuildingSize As Vector2Int, buildingTilemap As TilemapStructure, gridPosition As Vector2Int)
  overload: Helpers.HelpingClasses.PlacingHelper.SetTakenTiles*
  nameWithType.vb: PlacingHelper.SetTakenTiles(BuildingSO, Integer, Vector2Int, TilemapStructure, Vector2Int)
  fullName.vb: Helpers.HelpingClasses.PlacingHelper.SetTakenTiles(BuildingSO, Integer, Vector2Int, TilemapStructure, Vector2Int)
  name.vb: SetTakenTiles(BuildingSO, Integer, Vector2Int, TilemapStructure, Vector2Int)
- uid: Helpers.HelpingClasses.PlacingHelper.PlaceMoreTiles(SideEnum,Vector2Int,TilemapStructure,Vector2Int,System.Int32)
  commentId: M:Helpers.HelpingClasses.PlacingHelper.PlaceMoreTiles(SideEnum,Vector2Int,TilemapStructure,Vector2Int,System.Int32)
  id: PlaceMoreTiles(SideEnum,Vector2Int,TilemapStructure,Vector2Int,System.Int32)
  parent: Helpers.HelpingClasses.PlacingHelper
  langs:
  - csharp
  - vb
  name: PlaceMoreTiles(SideEnum, Vector2Int, TilemapStructure, Vector2Int, int)
  nameWithType: PlacingHelper.PlaceMoreTiles(SideEnum, Vector2Int, TilemapStructure, Vector2Int, int)
  fullName: Helpers.HelpingClasses.PlacingHelper.PlaceMoreTiles(SideEnum, Vector2Int, TilemapStructure, Vector2Int, int)
  type: Method
  source:
    id: PlaceMoreTiles
    path: ''
    startLine: 46523
  assemblies:
  - cs.temp.dll
  namespace: Helpers.HelpingClasses
  syntax:
    content: public static void PlaceMoreTiles(SideEnum side, Vector2Int currentBuildingSize, TilemapStructure buildingTilemap, Vector2Int gridPosition, int tileType)
    parameters:
    - id: side
      type: Global.SideEnum
    - id: currentBuildingSize
      type: Global.Vector2Int
    - id: buildingTilemap
      type: Global.TilemapStructure
    - id: gridPosition
      type: Global.Vector2Int
    - id: tileType
      type: System.Int32
    content.vb: Public Shared Sub PlaceMoreTiles(side As SideEnum, currentBuildingSize As Vector2Int, buildingTilemap As TilemapStructure, gridPosition As Vector2Int, tileType As Integer)
  overload: Helpers.HelpingClasses.PlacingHelper.PlaceMoreTiles*
  nameWithType.vb: PlacingHelper.PlaceMoreTiles(SideEnum, Vector2Int, TilemapStructure, Vector2Int, Integer)
  fullName.vb: Helpers.HelpingClasses.PlacingHelper.PlaceMoreTiles(SideEnum, Vector2Int, TilemapStructure, Vector2Int, Integer)
  name.vb: PlaceMoreTiles(SideEnum, Vector2Int, TilemapStructure, Vector2Int, Integer)
- uid: Helpers.HelpingClasses.PlacingHelper.EnableBuildingMap(BuildingSO)
  commentId: M:Helpers.HelpingClasses.PlacingHelper.EnableBuildingMap(BuildingSO)
  id: EnableBuildingMap(BuildingSO)
  parent: Helpers.HelpingClasses.PlacingHelper
  langs:
  - csharp
  - vb
  name: EnableBuildingMap(BuildingSO)
  nameWithType: PlacingHelper.EnableBuildingMap(BuildingSO)
  fullName: Helpers.HelpingClasses.PlacingHelper.EnableBuildingMap(BuildingSO)
  type: Method
  source:
    id: EnableBuildingMap
    path: ''
    startLine: 46562
  assemblies:
  - cs.temp.dll
  namespace: Helpers.HelpingClasses
  summary: "\nChecks if the building map should be shown\n"
  example: []
  syntax:
    content: public static bool EnableBuildingMap(BuildingSO buildingSO)
    parameters:
    - id: buildingSO
      type: Global.BuildingSO
    return:
      type: System.Boolean
    content.vb: Public Shared Function EnableBuildingMap(buildingSO As BuildingSO) As Boolean
  overload: Helpers.HelpingClasses.PlacingHelper.EnableBuildingMap*
references:
- uid: Helpers.HelpingClasses
  commentId: N:Helpers.HelpingClasses
  name: Helpers.HelpingClasses
  nameWithType: Helpers.HelpingClasses
  fullName: Helpers.HelpingClasses
  spec.csharp:
  - uid: Helpers
    name: Helpers
  - name: .
  - uid: Helpers.HelpingClasses
    name: HelpingClasses
  spec.vb:
  - uid: Helpers
    name: Helpers
  - name: .
  - uid: Helpers.HelpingClasses
    name: HelpingClasses
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Helpers.HelpingClasses.PlacingHelper.IsTaken*
  commentId: Overload:Helpers.HelpingClasses.PlacingHelper.IsTaken
  name: IsTaken
  nameWithType: PlacingHelper.IsTaken
  fullName: Helpers.HelpingClasses.PlacingHelper.IsTaken
- uid: Global.Vector3Int
  isExternal: true
  name: Vector3Int
  nameWithType: Vector3Int
  fullName: Vector3Int
- uid: Global.TilemapStructure
  isExternal: true
  name: TilemapStructure
  nameWithType: TilemapStructure
  fullName: TilemapStructure
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Helpers.HelpingClasses.PlacingHelper.WorldToGridPosition*
  commentId: Overload:Helpers.HelpingClasses.PlacingHelper.WorldToGridPosition
  name: WorldToGridPosition
  nameWithType: PlacingHelper.WorldToGridPosition
  fullName: Helpers.HelpingClasses.PlacingHelper.WorldToGridPosition
- uid: Global.Vector3
  isExternal: true
  name: Vector3
  nameWithType: Vector3
  fullName: Vector3
- uid: Global.Vector2
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Vector2
- uid: Global.Vector2Int
  isExternal: true
  name: Vector2Int
  nameWithType: Vector2Int
  fullName: Vector2Int
- uid: Helpers.HelpingClasses.PlacingHelper.GridToWorldPosition*
  commentId: Overload:Helpers.HelpingClasses.PlacingHelper.GridToWorldPosition
  name: GridToWorldPosition
  nameWithType: PlacingHelper.GridToWorldPosition
  fullName: Helpers.HelpingClasses.PlacingHelper.GridToWorldPosition
- uid: Helpers.HelpingClasses.PlacingHelper.AddThrough*
  commentId: Overload:Helpers.HelpingClasses.PlacingHelper.AddThrough
  name: AddThrough
  nameWithType: PlacingHelper.AddThrough
  fullName: Helpers.HelpingClasses.PlacingHelper.AddThrough
- uid: Global.BuildingSO
  isExternal: true
  name: BuildingSO
  nameWithType: BuildingSO
  fullName: BuildingSO
- uid: Global.MapBuildingsDataSO
  isExternal: true
  name: MapBuildingsDataSO
  nameWithType: MapBuildingsDataSO
  fullName: MapBuildingsDataSO
- uid: Helpers.HelpingClasses.PlacingHelper.ClearPreviousTiles*
  commentId: Overload:Helpers.HelpingClasses.PlacingHelper.ClearPreviousTiles
  name: ClearPreviousTiles
  nameWithType: PlacingHelper.ClearPreviousTiles
  fullName: Helpers.HelpingClasses.PlacingHelper.ClearPreviousTiles
- uid: Global.Tilemap
  isExternal: true
  name: Tilemap
  nameWithType: Tilemap
  fullName: Tilemap
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Helpers.HelpingClasses.PlacingHelper.SetTakenTiles*
  commentId: Overload:Helpers.HelpingClasses.PlacingHelper.SetTakenTiles
  name: SetTakenTiles
  nameWithType: PlacingHelper.SetTakenTiles
  fullName: Helpers.HelpingClasses.PlacingHelper.SetTakenTiles
- uid: Helpers.HelpingClasses.PlacingHelper.PlaceMoreTiles*
  commentId: Overload:Helpers.HelpingClasses.PlacingHelper.PlaceMoreTiles
  name: PlaceMoreTiles
  nameWithType: PlacingHelper.PlaceMoreTiles
  fullName: Helpers.HelpingClasses.PlacingHelper.PlaceMoreTiles
- uid: Global.SideEnum
  isExternal: true
  name: SideEnum
  nameWithType: SideEnum
  fullName: SideEnum
- uid: Helpers.HelpingClasses.PlacingHelper.EnableBuildingMap*
  commentId: Overload:Helpers.HelpingClasses.PlacingHelper.EnableBuildingMap
  name: EnableBuildingMap
  nameWithType: PlacingHelper.EnableBuildingMap
  fullName: Helpers.HelpingClasses.PlacingHelper.EnableBuildingMap
