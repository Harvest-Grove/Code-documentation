### YamlMime:ManagedReference
items:
- uid: World.DestroyableObjects.HitObjects
  commentId: T:World.DestroyableObjects.HitObjects
  id: HitObjects
  parent: World.DestroyableObjects
  children:
  - World.DestroyableObjects.HitObjects.#ctor(World.DestroyableObjects.DropableListSO)
  - World.DestroyableObjects.HitObjects.FilePath(IslandsDictionaryNames)
  - World.DestroyableObjects.HitObjects.GetHealth(Vector2)
  - World.DestroyableObjects.HitObjects.HitObjectsDictionary
  - World.DestroyableObjects.HitObjects.LoadData(IslandsDictionaryNames)
  - World.DestroyableObjects.HitObjects.RemoveObject(Vector2)
  - World.DestroyableObjects.HitObjects.ResetSO
  - World.DestroyableObjects.HitObjects.SaveData(IslandsDictionaryNames)
  - World.DestroyableObjects.HitObjects.UpdateHealth(Vector2,System.UInt16,System.UInt16)
  langs:
  - csharp
  - vb
  name: HitObjects
  nameWithType: HitObjects
  fullName: World.DestroyableObjects.HitObjects
  type: Class
  source:
    id: HitObjects
    path: ''
    startLine: 8264
  assemblies:
  - cs.temp.dll
  namespace: World.DestroyableObjects
  syntax:
    content: public class HitObjects
    content.vb: Public Class HitObjects
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: World.DestroyableObjects.HitObjects.FilePath(IslandsDictionaryNames)
  commentId: M:World.DestroyableObjects.HitObjects.FilePath(IslandsDictionaryNames)
  id: FilePath(IslandsDictionaryNames)
  parent: World.DestroyableObjects.HitObjects
  langs:
  - csharp
  - vb
  name: FilePath(IslandsDictionaryNames)
  nameWithType: HitObjects.FilePath(IslandsDictionaryNames)
  fullName: World.DestroyableObjects.HitObjects.FilePath(IslandsDictionaryNames)
  type: Method
  source:
    id: FilePath
    path: ''
    startLine: 8266
  assemblies:
  - cs.temp.dll
  namespace: World.DestroyableObjects
  syntax:
    content: public string FilePath(IslandsDictionaryNames island)
    parameters:
    - id: island
      type: Global.IslandsDictionaryNames
    return:
      type: System.String
    content.vb: Public Function FilePath(island As IslandsDictionaryNames) As String
  overload: World.DestroyableObjects.HitObjects.FilePath*
- uid: World.DestroyableObjects.HitObjects.HitObjectsDictionary
  commentId: F:World.DestroyableObjects.HitObjects.HitObjectsDictionary
  id: HitObjectsDictionary
  parent: World.DestroyableObjects.HitObjects
  langs:
  - csharp
  - vb
  name: HitObjectsDictionary
  nameWithType: HitObjects.HitObjectsDictionary
  fullName: World.DestroyableObjects.HitObjects.HitObjectsDictionary
  type: Field
  source:
    id: HitObjectsDictionary
    path: ''
    startLine: 8273
  assemblies:
  - cs.temp.dll
  namespace: World.DestroyableObjects
  summary: "\nEvery single object which was hit\n"
  example: []
  syntax:
    content: public Dictionary<Vector2, DestroyedOjectData> HitObjectsDictionary
    return:
      type: Global.Dictionary{Vector2,World.DestroyableObjects.DestroyedOjectData}
    content.vb: Public HitObjectsDictionary As Dictionary(Of Vector2, DestroyedOjectData)
- uid: World.DestroyableObjects.HitObjects.#ctor(World.DestroyableObjects.DropableListSO)
  commentId: M:World.DestroyableObjects.HitObjects.#ctor(World.DestroyableObjects.DropableListSO)
  id: '#ctor(World.DestroyableObjects.DropableListSO)'
  parent: World.DestroyableObjects.HitObjects
  langs:
  - csharp
  - vb
  name: HitObjects(DropableListSO)
  nameWithType: HitObjects.HitObjects(DropableListSO)
  fullName: World.DestroyableObjects.HitObjects.HitObjects(World.DestroyableObjects.DropableListSO)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 8276
  assemblies:
  - cs.temp.dll
  namespace: World.DestroyableObjects
  syntax:
    content: public HitObjects(DropableListSO dropableList)
    parameters:
    - id: dropableList
      type: World.DestroyableObjects.DropableListSO
    content.vb: Public Sub New(dropableList As DropableListSO)
  overload: World.DestroyableObjects.HitObjects.#ctor*
  nameWithType.vb: HitObjects.New(DropableListSO)
  fullName.vb: World.DestroyableObjects.HitObjects.New(World.DestroyableObjects.DropableListSO)
  name.vb: New(DropableListSO)
- uid: World.DestroyableObjects.HitObjects.RemoveObject(Vector2)
  commentId: M:World.DestroyableObjects.HitObjects.RemoveObject(Vector2)
  id: RemoveObject(Vector2)
  parent: World.DestroyableObjects.HitObjects
  langs:
  - csharp
  - vb
  name: RemoveObject(Vector2)
  nameWithType: HitObjects.RemoveObject(Vector2)
  fullName: World.DestroyableObjects.HitObjects.RemoveObject(Vector2)
  type: Method
  source:
    id: RemoveObject
    path: ''
    startLine: 8285
  assemblies:
  - cs.temp.dll
  namespace: World.DestroyableObjects
  summary: "\nRemoves an item from the list based on the given position.\n"
  example: []
  syntax:
    content: public void RemoveObject(Vector2 position)
    parameters:
    - id: position
      type: Global.Vector2
    content.vb: Public Sub RemoveObject(position As Vector2)
  overload: World.DestroyableObjects.HitObjects.RemoveObject*
- uid: World.DestroyableObjects.HitObjects.UpdateHealth(Vector2,System.UInt16,System.UInt16)
  commentId: M:World.DestroyableObjects.HitObjects.UpdateHealth(Vector2,System.UInt16,System.UInt16)
  id: UpdateHealth(Vector2,System.UInt16,System.UInt16)
  parent: World.DestroyableObjects.HitObjects
  langs:
  - csharp
  - vb
  name: UpdateHealth(Vector2, ushort, ushort)
  nameWithType: HitObjects.UpdateHealth(Vector2, ushort, ushort)
  fullName: World.DestroyableObjects.HitObjects.UpdateHealth(Vector2, ushort, ushort)
  type: Method
  source:
    id: UpdateHealth
    path: ''
    startLine: 8291
  assemblies:
  - cs.temp.dll
  namespace: World.DestroyableObjects
  summary: "\nUpdates the health of an item based on the given position and damage done to it.\nAdds the item to the list if it doesn&apos;t already exist.\n"
  example: []
  syntax:
    content: public void UpdateHealth(Vector2 position, ushort damage, ushort ID)
    parameters:
    - id: position
      type: Global.Vector2
    - id: damage
      type: System.UInt16
    - id: ID
      type: System.UInt16
    content.vb: Public Sub UpdateHealth(position As Vector2, damage As UShort, ID As UShort)
  overload: World.DestroyableObjects.HitObjects.UpdateHealth*
  nameWithType.vb: HitObjects.UpdateHealth(Vector2, UShort, UShort)
  fullName.vb: World.DestroyableObjects.HitObjects.UpdateHealth(Vector2, UShort, UShort)
  name.vb: UpdateHealth(Vector2, UShort, UShort)
- uid: World.DestroyableObjects.HitObjects.GetHealth(Vector2)
  commentId: M:World.DestroyableObjects.HitObjects.GetHealth(Vector2)
  id: GetHealth(Vector2)
  parent: World.DestroyableObjects.HitObjects
  langs:
  - csharp
  - vb
  name: GetHealth(Vector2)
  nameWithType: HitObjects.GetHealth(Vector2)
  fullName: World.DestroyableObjects.HitObjects.GetHealth(Vector2)
  type: Method
  source:
    id: GetHealth
    path: ''
    startLine: 8306
  assemblies:
  - cs.temp.dll
  namespace: World.DestroyableObjects
  syntax:
    content: public (short currentHealth, short maxHealth) GetHealth(Vector2 position)
    parameters:
    - id: position
      type: Global.Vector2
    return:
      type: System.ValueTuple{System.Int16,System.Int16}
    content.vb: Public Function GetHealth(position As Vector2) As (currentHealth As Short, maxHealth As Short)
  overload: World.DestroyableObjects.HitObjects.GetHealth*
- uid: World.DestroyableObjects.HitObjects.SaveData(IslandsDictionaryNames)
  commentId: M:World.DestroyableObjects.HitObjects.SaveData(IslandsDictionaryNames)
  id: SaveData(IslandsDictionaryNames)
  parent: World.DestroyableObjects.HitObjects
  langs:
  - csharp
  - vb
  name: SaveData(IslandsDictionaryNames)
  nameWithType: HitObjects.SaveData(IslandsDictionaryNames)
  fullName: World.DestroyableObjects.HitObjects.SaveData(IslandsDictionaryNames)
  type: Method
  source:
    id: SaveData
    path: ''
    startLine: 8314
  assemblies:
  - cs.temp.dll
  namespace: World.DestroyableObjects
  syntax:
    content: public void SaveData(IslandsDictionaryNames island)
    parameters:
    - id: island
      type: Global.IslandsDictionaryNames
    content.vb: Public Sub SaveData(island As IslandsDictionaryNames)
  overload: World.DestroyableObjects.HitObjects.SaveData*
- uid: World.DestroyableObjects.HitObjects.LoadData(IslandsDictionaryNames)
  commentId: M:World.DestroyableObjects.HitObjects.LoadData(IslandsDictionaryNames)
  id: LoadData(IslandsDictionaryNames)
  parent: World.DestroyableObjects.HitObjects
  langs:
  - csharp
  - vb
  name: LoadData(IslandsDictionaryNames)
  nameWithType: HitObjects.LoadData(IslandsDictionaryNames)
  fullName: World.DestroyableObjects.HitObjects.LoadData(IslandsDictionaryNames)
  type: Method
  source:
    id: LoadData
    path: ''
    startLine: 8321
  assemblies:
  - cs.temp.dll
  namespace: World.DestroyableObjects
  syntax:
    content: public void LoadData(IslandsDictionaryNames island)
    parameters:
    - id: island
      type: Global.IslandsDictionaryNames
    content.vb: Public Sub LoadData(island As IslandsDictionaryNames)
  overload: World.DestroyableObjects.HitObjects.LoadData*
- uid: World.DestroyableObjects.HitObjects.ResetSO
  commentId: M:World.DestroyableObjects.HitObjects.ResetSO
  id: ResetSO
  parent: World.DestroyableObjects.HitObjects
  langs:
  - csharp
  - vb
  name: ResetSO()
  nameWithType: HitObjects.ResetSO()
  fullName: World.DestroyableObjects.HitObjects.ResetSO()
  type: Method
  source:
    id: ResetSO
    path: ''
    startLine: 8329
  assemblies:
  - cs.temp.dll
  namespace: World.DestroyableObjects
  syntax:
    content: public void ResetSO()
    content.vb: Public Sub ResetSO()
  overload: World.DestroyableObjects.HitObjects.ResetSO*
references:
- uid: World.DestroyableObjects
  commentId: N:World.DestroyableObjects
  name: World.DestroyableObjects
  nameWithType: World.DestroyableObjects
  fullName: World.DestroyableObjects
  spec.csharp:
  - uid: World
    name: World
  - name: .
  - uid: World.DestroyableObjects
    name: DestroyableObjects
  spec.vb:
  - uid: World
    name: World
  - name: .
  - uid: World.DestroyableObjects
    name: DestroyableObjects
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: World.DestroyableObjects.HitObjects.FilePath*
  commentId: Overload:World.DestroyableObjects.HitObjects.FilePath
  name: FilePath
  nameWithType: HitObjects.FilePath
  fullName: World.DestroyableObjects.HitObjects.FilePath
- uid: Global.IslandsDictionaryNames
  isExternal: true
  name: IslandsDictionaryNames
  nameWithType: IslandsDictionaryNames
  fullName: IslandsDictionaryNames
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Global.Dictionary{Vector2,World.DestroyableObjects.DestroyedOjectData}
  commentId: '!:Global.Dictionary{Vector2,World.DestroyableObjects.DestroyedOjectData}'
  definition: Global.Dictionary`2
  name: Dictionary<Vector2, DestroyedOjectData>
  nameWithType: Dictionary<Vector2, DestroyedOjectData>
  fullName: Dictionary<Vector2, World.DestroyableObjects.DestroyedOjectData>
  nameWithType.vb: Dictionary(Of Vector2, DestroyedOjectData)
  fullName.vb: Dictionary(Of Vector2, World.DestroyableObjects.DestroyedOjectData)
  name.vb: Dictionary(Of Vector2, DestroyedOjectData)
  spec.csharp:
  - uid: Global.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: <
  - uid: Global.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: World.DestroyableObjects.DestroyedOjectData
    name: DestroyedOjectData
  - name: '>'
  spec.vb:
  - uid: Global.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: World.DestroyableObjects.DestroyedOjectData
    name: DestroyedOjectData
  - name: )
- uid: Global.Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: Global.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: <
  - name: ''
  - name: ','
  - name: " "
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: ','
  - name: " "
  - name: ''
  - name: )
- uid: World.DestroyableObjects.HitObjects.#ctor*
  commentId: Overload:World.DestroyableObjects.HitObjects.#ctor
  name: HitObjects
  nameWithType: HitObjects.HitObjects
  fullName: World.DestroyableObjects.HitObjects.HitObjects
  nameWithType.vb: HitObjects.New
  fullName.vb: World.DestroyableObjects.HitObjects.New
  name.vb: New
- uid: World.DestroyableObjects.DropableListSO
  commentId: T:World.DestroyableObjects.DropableListSO
  parent: World.DestroyableObjects
  name: DropableListSO
  nameWithType: DropableListSO
  fullName: World.DestroyableObjects.DropableListSO
- uid: World.DestroyableObjects.HitObjects.RemoveObject*
  commentId: Overload:World.DestroyableObjects.HitObjects.RemoveObject
  name: RemoveObject
  nameWithType: HitObjects.RemoveObject
  fullName: World.DestroyableObjects.HitObjects.RemoveObject
- uid: Global.Vector2
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Vector2
- uid: World.DestroyableObjects.HitObjects.UpdateHealth*
  commentId: Overload:World.DestroyableObjects.HitObjects.UpdateHealth
  name: UpdateHealth
  nameWithType: HitObjects.UpdateHealth
  fullName: World.DestroyableObjects.HitObjects.UpdateHealth
- uid: System.UInt16
  commentId: T:System.UInt16
  parent: System
  isExternal: true
  name: ushort
  nameWithType: ushort
  fullName: ushort
  nameWithType.vb: UShort
  fullName.vb: UShort
  name.vb: UShort
- uid: World.DestroyableObjects.HitObjects.GetHealth*
  commentId: Overload:World.DestroyableObjects.HitObjects.GetHealth
  name: GetHealth
  nameWithType: HitObjects.GetHealth
  fullName: World.DestroyableObjects.HitObjects.GetHealth
- uid: System.ValueTuple{System.Int16,System.Int16}
  commentId: T:System.ValueTuple{System.Int16,System.Int16}
  parent: System
  definition: System.ValueTuple`2
  name: (short currentHealth, short maxHealth)
  nameWithType: (short currentHealth, short maxHealth)
  fullName: (short currentHealth, short maxHealth)
  nameWithType.vb: (currentHealth As Short, maxHealth As Short)
  fullName.vb: (currentHealth As Short, maxHealth As Short)
  name.vb: (currentHealth As Short, maxHealth As Short)
  spec.csharp:
  - name: (
  - uid: System.Int16
    name: short
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{System.Int16,System.Int16}.currentHealth
    name: currentHealth
  - name: ','
  - name: " "
  - uid: System.Int16
    name: short
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{System.Int16,System.Int16}.maxHealth
    name: maxHealth
  - name: )
  spec.vb:
  - name: (
  - uid: System.ValueTuple{System.Int16,System.Int16}.currentHealth
    name: currentHealth
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int16
    name: Short
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Int16,System.Int16}.maxHealth
    name: maxHealth
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int16
    name: Short
    isExternal: true
  - name: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  name: (T1, T2)
  nameWithType: (T1, T2)
  fullName: (T1, T2)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: World.DestroyableObjects.HitObjects.SaveData*
  commentId: Overload:World.DestroyableObjects.HitObjects.SaveData
  name: SaveData
  nameWithType: HitObjects.SaveData
  fullName: World.DestroyableObjects.HitObjects.SaveData
- uid: World.DestroyableObjects.HitObjects.LoadData*
  commentId: Overload:World.DestroyableObjects.HitObjects.LoadData
  name: LoadData
  nameWithType: HitObjects.LoadData
  fullName: World.DestroyableObjects.HitObjects.LoadData
- uid: World.DestroyableObjects.HitObjects.ResetSO*
  commentId: Overload:World.DestroyableObjects.HitObjects.ResetSO
  name: ResetSO
  nameWithType: HitObjects.ResetSO
  fullName: World.DestroyableObjects.HitObjects.ResetSO
