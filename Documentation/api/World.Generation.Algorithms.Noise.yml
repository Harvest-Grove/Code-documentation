### YamlMime:ManagedReference
items:
- uid: World.Generation.Algorithms.Noise
  commentId: T:World.Generation.Algorithms.Noise
  id: Noise
  parent: World.Generation.Algorithms
  children:
  - World.Generation.Algorithms.Noise.GenerateIslandGradientMap(System.Int32,System.Int32)
  - World.Generation.Algorithms.Noise.GenerateNoiseMap(System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Single,System.Single,Vector2)
  langs:
  - csharp
  - vb
  name: Noise
  nameWithType: Noise
  fullName: World.Generation.Algorithms.Noise
  type: Class
  source:
    id: Noise
    path: ''
    startLine: 6961
  assemblies:
  - cs.temp.dll
  namespace: World.Generation.Algorithms
  syntax:
    content: public class Noise
    content.vb: Public Class Noise
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: World.Generation.Algorithms.Noise.GenerateNoiseMap(System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Single,System.Single,Vector2)
  commentId: M:World.Generation.Algorithms.Noise.GenerateNoiseMap(System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Single,System.Single,Vector2)
  id: GenerateNoiseMap(System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Single,System.Single,Vector2)
  parent: World.Generation.Algorithms.Noise
  langs:
  - csharp
  - vb
  name: GenerateNoiseMap(int, int, int, float, int, float, float, Vector2)
  nameWithType: Noise.GenerateNoiseMap(int, int, int, float, int, float, float, Vector2)
  fullName: World.Generation.Algorithms.Noise.GenerateNoiseMap(int, int, int, float, int, float, float, Vector2)
  type: Method
  source:
    id: GenerateNoiseMap
    path: ''
    startLine: 6963
  assemblies:
  - cs.temp.dll
  namespace: World.Generation.Algorithms
  syntax:
    content: public static float[] GenerateNoiseMap(int mapWidth, int mapHeight, int seed, float scale, int octaves, float persistance, float lacunarity, Vector2 offset)
    parameters:
    - id: mapWidth
      type: System.Int32
    - id: mapHeight
      type: System.Int32
    - id: seed
      type: System.Int32
    - id: scale
      type: System.Single
    - id: octaves
      type: System.Int32
    - id: persistance
      type: System.Single
    - id: lacunarity
      type: System.Single
    - id: offset
      type: Global.Vector2
    return:
      type: System.Single[]
    content.vb: Public Shared Function GenerateNoiseMap(mapWidth As Integer, mapHeight As Integer, seed As Integer, scale As Single, octaves As Integer, persistance As Single, lacunarity As Single, offset As Vector2) As Single()
  overload: World.Generation.Algorithms.Noise.GenerateNoiseMap*
  nameWithType.vb: Noise.GenerateNoiseMap(Integer, Integer, Integer, Single, Integer, Single, Single, Vector2)
  fullName.vb: World.Generation.Algorithms.Noise.GenerateNoiseMap(Integer, Integer, Integer, Single, Integer, Single, Single, Vector2)
  name.vb: GenerateNoiseMap(Integer, Integer, Integer, Single, Integer, Single, Single, Vector2)
- uid: World.Generation.Algorithms.Noise.GenerateIslandGradientMap(System.Int32,System.Int32)
  commentId: M:World.Generation.Algorithms.Noise.GenerateIslandGradientMap(System.Int32,System.Int32)
  id: GenerateIslandGradientMap(System.Int32,System.Int32)
  parent: World.Generation.Algorithms.Noise
  langs:
  - csharp
  - vb
  name: GenerateIslandGradientMap(int, int)
  nameWithType: Noise.GenerateIslandGradientMap(int, int)
  fullName: World.Generation.Algorithms.Noise.GenerateIslandGradientMap(int, int)
  type: Method
  source:
    id: GenerateIslandGradientMap
    path: ''
    startLine: 7089
  assemblies:
  - cs.temp.dll
  namespace: World.Generation.Algorithms
  syntax:
    content: public static float[] GenerateIslandGradientMap(int mapWidth, int mapHeight)
    parameters:
    - id: mapWidth
      type: System.Int32
    - id: mapHeight
      type: System.Int32
    return:
      type: System.Single[]
    content.vb: Public Shared Function GenerateIslandGradientMap(mapWidth As Integer, mapHeight As Integer) As Single()
  overload: World.Generation.Algorithms.Noise.GenerateIslandGradientMap*
  nameWithType.vb: Noise.GenerateIslandGradientMap(Integer, Integer)
  fullName.vb: World.Generation.Algorithms.Noise.GenerateIslandGradientMap(Integer, Integer)
  name.vb: GenerateIslandGradientMap(Integer, Integer)
references:
- uid: World.Generation.Algorithms
  commentId: N:World.Generation.Algorithms
  name: World.Generation.Algorithms
  nameWithType: World.Generation.Algorithms
  fullName: World.Generation.Algorithms
  spec.csharp:
  - uid: World
    name: World
  - name: .
  - uid: World.Generation
    name: Generation
  - name: .
  - uid: World.Generation.Algorithms
    name: Algorithms
  spec.vb:
  - uid: World
    name: World
  - name: .
  - uid: World.Generation
    name: Generation
  - name: .
  - uid: World.Generation.Algorithms
    name: Algorithms
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: World.Generation.Algorithms.Noise.GenerateNoiseMap*
  commentId: Overload:World.Generation.Algorithms.Noise.GenerateNoiseMap
  name: GenerateNoiseMap
  nameWithType: Noise.GenerateNoiseMap
  fullName: World.Generation.Algorithms.Noise.GenerateNoiseMap
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: Global.Vector2
  isExternal: true
  name: Vector2
  nameWithType: Vector2
  fullName: Vector2
- uid: System.Single[]
  isExternal: true
  name: float[]
  nameWithType: float[]
  fullName: float[]
  nameWithType.vb: Single()
  fullName.vb: Single()
  name.vb: Single()
  spec.csharp:
  - uid: System.Single
    name: float
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Single
    name: Single
    isExternal: true
  - name: (
  - name: )
- uid: World.Generation.Algorithms.Noise.GenerateIslandGradientMap*
  commentId: Overload:World.Generation.Algorithms.Noise.GenerateIslandGradientMap
  name: GenerateIslandGradientMap
  nameWithType: Noise.GenerateIslandGradientMap
  fullName: World.Generation.Algorithms.Noise.GenerateIslandGradientMap
