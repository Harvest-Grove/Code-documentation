### YamlMime:ManagedReference
items:
- uid: Global.PlayerInput
  commentId: T:Global.PlayerInput
  id: PlayerInput
  parent: Global
  children:
  - Global.PlayerInput.#ctor
  - Global.PlayerInput.asset
  - Global.PlayerInput.bindingMask
  - Global.PlayerInput.bindings
  - Global.PlayerInput.Contains(InputAction)
  - Global.PlayerInput.controlSchemes
  - Global.PlayerInput.devices
  - Global.PlayerInput.Disable
  - Global.PlayerInput.Dispose
  - Global.PlayerInput.Enable
  - Global.PlayerInput.Finalize
  - Global.PlayerInput.FindAction(System.String,System.Boolean)
  - Global.PlayerInput.FindBinding(InputBinding,InputAction@)
  - Global.PlayerInput.GetEnumerator
  - Global.PlayerInput.Player
  - Global.PlayerInput.ScreenshotScheme
  - Global.PlayerInput.UI
  langs:
  - csharp
  - vb
  name: PlayerInput
  nameWithType: PlayerInput
  fullName: PlayerInput
  type: Class
  source:
    id: PlayerInput
    path: ''
    startLine: 1731
  assemblies:
  - cs.temp.dll
  namespace: Global
  summary: "\nProvides programmatic access to <see cref=\"!:InputActionAsset\"></see>, <see cref=\"!:InputActionMap\"></see>, <see cref=\"!:InputAction\"></see> and <see cref=\"!:InputControlScheme\"></see> instances defined in asset &quot;Assets/Packages/InputSystem/PlayerInputs.inputactions&quot;.\n"
  remarks: "\nThis class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.\n"
  example:
  - "\n<pre><code>using namespace UnityEngine;\nusing UnityEngine.InputSystem;\n\n// Example of using an InputActionMap named &quot;Player&quot; from a UnityEngine.MonoBehaviour implementing callback interface.\npublic class Example : MonoBehaviour, MyActions.IPlayerActions\n{\n    private MyActions_Actions m_Actions;                  // Source code representation of asset.\n    private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.\n\n    void Awake()\n    {\n        m_Actions = new MyActions_Actions();              // Create asset object.\n        m_Player = m_Actions.Player;                      // Extract action map object.\n        m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.\n    }\n\n    void OnDestroy()\n    {\n        m_Actions.Dispose();                              // Destroy asset object.\n    }\n\n    void OnEnable()\n    {\n        m_Player.Enable();                                // Enable all actions within map.\n    }\n\n    void OnDisable()\n    {\n        m_Player.Disable();                               // Disable all actions within map.\n    }\n\n    #region Interface implementation of MyActions.IPlayerActions\n\n    // Invoked when &quot;Move&quot; action is either started, performed or canceled.\n    public void OnMove(InputAction.CallbackContext context)\n    {\n        Debug.Log($&quot;OnMove: {context.ReadValue&lt;Vector2>()}&quot;);\n    }\n\n    // Invoked when &quot;Attack&quot; action is either started, performed or canceled.\n    public void OnAttack(InputAction.CallbackContext context)\n    {\n        Debug.Log($&quot;OnAttack: {context.ReadValue&lt;float>()}&quot;);\n    }\n\n    #endregion\n}</code></pre>\n"
  syntax:
    content: 'public class PlayerInput : IInputActionCollection2, IDisposable'
    content.vb: Public Class PlayerInput Inherits IInputActionCollection2 Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - Global.IDisposable
- uid: Global.PlayerInput.asset
  commentId: P:Global.PlayerInput.asset
  id: asset
  parent: Global.PlayerInput
  langs:
  - csharp
  - vb
  name: asset
  nameWithType: PlayerInput.asset
  fullName: PlayerInput.asset
  type: Property
  source:
    id: asset
    path: ''
    startLine: 1736
  assemblies:
  - cs.temp.dll
  namespace: Global
  summary: "\nProvides access to the underlying asset instance.\n"
  example: []
  syntax:
    content: public InputActionAsset asset { get; }
    parameters: []
    return:
      type: Global.InputActionAsset
    content.vb: Public ReadOnly Property asset As InputActionAsset
  overload: Global.PlayerInput.asset*
- uid: Global.PlayerInput.#ctor
  commentId: M:Global.PlayerInput.#ctor
  id: '#ctor'
  parent: Global.PlayerInput
  langs:
  - csharp
  - vb
  name: PlayerInput()
  nameWithType: PlayerInput.PlayerInput()
  fullName: PlayerInput.PlayerInput()
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 1741
  assemblies:
  - cs.temp.dll
  namespace: Global
  summary: "\nConstructs a new instance.\n"
  example: []
  syntax:
    content: public PlayerInput()
    content.vb: Public Sub New()
  overload: Global.PlayerInput.#ctor*
  nameWithType.vb: PlayerInput.New()
  fullName.vb: PlayerInput.New()
  name.vb: New()
- uid: Global.PlayerInput.Finalize
  commentId: M:Global.PlayerInput.Finalize
  id: Finalize
  parent: Global.PlayerInput
  langs:
  - csharp
  - vb
  name: ~PlayerInput()
  nameWithType: PlayerInput.~PlayerInput()
  fullName: PlayerInput.~PlayerInput()
  type: Method
  source:
    id: Finalize
    path: ''
    startLine: 2479
  assemblies:
  - cs.temp.dll
  namespace: Global
  syntax:
    content: protected ~PlayerInput()
  overload: Global.PlayerInput.Finalize*
  nameWithType.vb: ''
  fullName.vb: ''
  name.vb: ''
- uid: Global.PlayerInput.Dispose
  commentId: M:Global.PlayerInput.Dispose
  id: Dispose
  parent: Global.PlayerInput
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: PlayerInput.Dispose()
  fullName: PlayerInput.Dispose()
  type: Method
  source:
    id: Dispose
    path: ''
    startLine: 2488
  assemblies:
  - cs.temp.dll
  namespace: Global
  summary: "\nDestroys this asset and all associated <see cref=\"!:InputAction\"></see> instances.\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose()
  overload: Global.PlayerInput.Dispose*
- uid: Global.PlayerInput.bindingMask
  commentId: P:Global.PlayerInput.bindingMask
  id: bindingMask
  parent: Global.PlayerInput
  langs:
  - csharp
  - vb
  name: bindingMask
  nameWithType: PlayerInput.bindingMask
  fullName: PlayerInput.bindingMask
  type: Property
  source:
    id: bindingMask
    path: ''
    startLine: 2494
  assemblies:
  - cs.temp.dll
  namespace: Global
  example: []
  syntax:
    content: public InputBinding? bindingMask { get; set; }
    parameters: []
    return:
      type: System.Nullable{InputBinding}
    content.vb: Public Property bindingMask As InputBinding?
  overload: Global.PlayerInput.bindingMask*
- uid: Global.PlayerInput.devices
  commentId: P:Global.PlayerInput.devices
  id: devices
  parent: Global.PlayerInput
  langs:
  - csharp
  - vb
  name: devices
  nameWithType: PlayerInput.devices
  fullName: PlayerInput.devices
  type: Property
  source:
    id: devices
    path: ''
    startLine: 2501
  assemblies:
  - cs.temp.dll
  namespace: Global
  example: []
  syntax:
    content: public ReadOnlyArray<InputDevice>? devices { get; set; }
    parameters: []
    return:
      type: System.Nullable{ReadOnlyArray{InputDevice}}
    content.vb: Public Property devices As ReadOnlyArray(Of InputDevice)?
  overload: Global.PlayerInput.devices*
- uid: Global.PlayerInput.controlSchemes
  commentId: P:Global.PlayerInput.controlSchemes
  id: controlSchemes
  parent: Global.PlayerInput
  langs:
  - csharp
  - vb
  name: controlSchemes
  nameWithType: PlayerInput.controlSchemes
  fullName: PlayerInput.controlSchemes
  type: Property
  source:
    id: controlSchemes
    path: ''
    startLine: 2508
  assemblies:
  - cs.temp.dll
  namespace: Global
  example: []
  syntax:
    content: public ReadOnlyArray<InputControlScheme> controlSchemes { get; }
    parameters: []
    return:
      type: Global.ReadOnlyArray{InputControlScheme}
    content.vb: Public ReadOnly Property controlSchemes As ReadOnlyArray(Of InputControlScheme)
  overload: Global.PlayerInput.controlSchemes*
- uid: Global.PlayerInput.Contains(InputAction)
  commentId: M:Global.PlayerInput.Contains(InputAction)
  id: Contains(InputAction)
  parent: Global.PlayerInput
  langs:
  - csharp
  - vb
  name: Contains(InputAction)
  nameWithType: PlayerInput.Contains(InputAction)
  fullName: PlayerInput.Contains(InputAction)
  type: Method
  source:
    id: Contains
    path: ''
    startLine: 2511
  assemblies:
  - cs.temp.dll
  namespace: Global
  example: []
  syntax:
    content: public bool Contains(InputAction action)
    parameters:
    - id: action
      type: Global.InputAction
    return:
      type: System.Boolean
    content.vb: Public Function Contains(action As InputAction) As Boolean
  overload: Global.PlayerInput.Contains*
- uid: Global.PlayerInput.GetEnumerator
  commentId: M:Global.PlayerInput.GetEnumerator
  id: GetEnumerator
  parent: Global.PlayerInput
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: PlayerInput.GetEnumerator()
  fullName: PlayerInput.GetEnumerator()
  type: Method
  source:
    id: GetEnumerator
    path: ''
    startLine: 2517
  assemblies:
  - cs.temp.dll
  namespace: Global
  example: []
  syntax:
    content: public IEnumerator<InputAction> GetEnumerator()
    return:
      type: Global.IEnumerator{InputAction}
    content.vb: Public Function GetEnumerator() As IEnumerator(Of InputAction)
  overload: Global.PlayerInput.GetEnumerator*
- uid: Global.PlayerInput.Enable
  commentId: M:Global.PlayerInput.Enable
  id: Enable
  parent: Global.PlayerInput
  langs:
  - csharp
  - vb
  name: Enable()
  nameWithType: PlayerInput.Enable()
  fullName: PlayerInput.Enable()
  type: Method
  source:
    id: Enable
    path: ''
    startLine: 2529
  assemblies:
  - cs.temp.dll
  namespace: Global
  example: []
  syntax:
    content: public void Enable()
    content.vb: Public Sub Enable()
  overload: Global.PlayerInput.Enable*
- uid: Global.PlayerInput.Disable
  commentId: M:Global.PlayerInput.Disable
  id: Disable
  parent: Global.PlayerInput
  langs:
  - csharp
  - vb
  name: Disable()
  nameWithType: PlayerInput.Disable()
  fullName: PlayerInput.Disable()
  type: Method
  source:
    id: Disable
    path: ''
    startLine: 2535
  assemblies:
  - cs.temp.dll
  namespace: Global
  example: []
  syntax:
    content: public void Disable()
    content.vb: Public Sub Disable()
  overload: Global.PlayerInput.Disable*
- uid: Global.PlayerInput.bindings
  commentId: P:Global.PlayerInput.bindings
  id: bindings
  parent: Global.PlayerInput
  langs:
  - csharp
  - vb
  name: bindings
  nameWithType: PlayerInput.bindings
  fullName: PlayerInput.bindings
  type: Property
  source:
    id: bindings
    path: ''
    startLine: 2541
  assemblies:
  - cs.temp.dll
  namespace: Global
  example: []
  syntax:
    content: public IEnumerable<InputBinding> bindings { get; }
    parameters: []
    return:
      type: Global.IEnumerable{InputBinding}
    content.vb: Public ReadOnly Property bindings As IEnumerable(Of InputBinding)
  overload: Global.PlayerInput.bindings*
- uid: Global.PlayerInput.FindAction(System.String,System.Boolean)
  commentId: M:Global.PlayerInput.FindAction(System.String,System.Boolean)
  id: FindAction(System.String,System.Boolean)
  parent: Global.PlayerInput
  langs:
  - csharp
  - vb
  name: FindAction(string, bool)
  nameWithType: PlayerInput.FindAction(string, bool)
  fullName: PlayerInput.FindAction(string, bool)
  type: Method
  source:
    id: FindAction
    path: ''
    startLine: 2544
  assemblies:
  - cs.temp.dll
  namespace: Global
  example: []
  syntax:
    content: public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    parameters:
    - id: actionNameOrId
      type: System.String
    - id: throwIfNotFound
      type: System.Boolean
    return:
      type: Global.InputAction
    content.vb: Public Function FindAction(actionNameOrId As String, throwIfNotFound As Boolean = False) As InputAction
  overload: Global.PlayerInput.FindAction*
  nameWithType.vb: PlayerInput.FindAction(String, Boolean)
  fullName.vb: PlayerInput.FindAction(String, Boolean)
  name.vb: FindAction(String, Boolean)
- uid: Global.PlayerInput.FindBinding(InputBinding,InputAction@)
  commentId: M:Global.PlayerInput.FindBinding(InputBinding,InputAction@)
  id: FindBinding(InputBinding,InputAction@)
  parent: Global.PlayerInput
  langs:
  - csharp
  - vb
  name: FindBinding(InputBinding, out InputAction)
  nameWithType: PlayerInput.FindBinding(InputBinding, out InputAction)
  fullName: PlayerInput.FindBinding(InputBinding, out InputAction)
  type: Method
  source:
    id: FindBinding
    path: ''
    startLine: 2550
  assemblies:
  - cs.temp.dll
  namespace: Global
  example: []
  syntax:
    content: public int FindBinding(InputBinding bindingMask, out InputAction action)
    parameters:
    - id: bindingMask
      type: Global.InputBinding
    - id: action
      type: Global.InputAction
    return:
      type: System.Int32
    content.vb: Public Function FindBinding(bindingMask As InputBinding, action As InputAction) As Integer
  overload: Global.PlayerInput.FindBinding*
  nameWithType.vb: PlayerInput.FindBinding(InputBinding, InputAction)
  fullName.vb: PlayerInput.FindBinding(InputBinding, InputAction)
  name.vb: FindBinding(InputBinding, InputAction)
- uid: Global.PlayerInput.Player
  commentId: P:Global.PlayerInput.Player
  id: Player
  parent: Global.PlayerInput
  langs:
  - csharp
  - vb
  name: Player
  nameWithType: PlayerInput.Player
  fullName: PlayerInput.Player
  type: Property
  source:
    id: Player
    path: ''
    startLine: 2671
  assemblies:
  - cs.temp.dll
  namespace: Global
  summary: "\nProvides a new <xref href=\"PlayerInput.PlayerActions\" data-throw-if-not-resolved=\"false\"></xref> instance referencing this action map.\n"
  example: []
  syntax:
    content: public PlayerInput.PlayerActions Player { get; }
    parameters: []
    return:
      type: Global.PlayerInput.PlayerActions
    content.vb: Public ReadOnly Property Player As PlayerInput.PlayerActions
  overload: Global.PlayerInput.Player*
- uid: Global.PlayerInput.UI
  commentId: P:Global.PlayerInput.UI
  id: UI
  parent: Global.PlayerInput
  langs:
  - csharp
  - vb
  name: UI
  nameWithType: PlayerInput.UI
  fullName: PlayerInput.UI
  type: Property
  source:
    id: UI
    path: ''
    startLine: 3064
  assemblies:
  - cs.temp.dll
  namespace: Global
  summary: "\nProvides a new <xref href=\"PlayerInput.UIActions\" data-throw-if-not-resolved=\"false\"></xref> instance referencing this action map.\n"
  example: []
  syntax:
    content: public PlayerInput.UIActions UI { get; }
    parameters: []
    return:
      type: Global.PlayerInput.UIActions
    content.vb: Public ReadOnly Property UI As PlayerInput.UIActions
  overload: Global.PlayerInput.UI*
- uid: Global.PlayerInput.ScreenshotScheme
  commentId: P:Global.PlayerInput.ScreenshotScheme
  id: ScreenshotScheme
  parent: Global.PlayerInput
  langs:
  - csharp
  - vb
  name: ScreenshotScheme
  nameWithType: PlayerInput.ScreenshotScheme
  fullName: PlayerInput.ScreenshotScheme
  type: Property
  source:
    id: ScreenshotScheme
    path: ''
    startLine: 3070
  assemblies:
  - cs.temp.dll
  namespace: Global
  summary: "\nProvides access to the input control scheme.\n"
  example: []
  syntax:
    content: public InputControlScheme ScreenshotScheme { get; }
    parameters: []
    return:
      type: Global.InputControlScheme
    content.vb: Public ReadOnly Property ScreenshotScheme As InputControlScheme
  overload: Global.PlayerInput.ScreenshotScheme*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Global.IDisposable
  commentId: '!:Global.IDisposable'
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: IDisposable
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.PlayerInput.asset*
  commentId: Overload:Global.PlayerInput.asset
  name: asset
  nameWithType: PlayerInput.asset
  fullName: PlayerInput.asset
- uid: Global.InputActionAsset
  isExternal: true
  name: InputActionAsset
  nameWithType: InputActionAsset
  fullName: InputActionAsset
- uid: Global.PlayerInput.#ctor*
  commentId: Overload:Global.PlayerInput.#ctor
  name: PlayerInput
  nameWithType: PlayerInput.PlayerInput
  fullName: PlayerInput.PlayerInput
  nameWithType.vb: PlayerInput.New
  fullName.vb: PlayerInput.New
  name.vb: New
- uid: Global.PlayerInput.Finalize*
  commentId: Overload:Global.PlayerInput.Finalize
  name: ~PlayerInput
  nameWithType: PlayerInput.~PlayerInput
  fullName: PlayerInput.~PlayerInput
  spec.csharp:
  - name: "~"
  - uid: Global.PlayerInput.Finalize*
    name: PlayerInput
- uid: Global.PlayerInput.Dispose*
  commentId: Overload:Global.PlayerInput.Dispose
  name: Dispose
  nameWithType: PlayerInput.Dispose
  fullName: PlayerInput.Dispose
- uid: Global.PlayerInput.bindingMask*
  commentId: Overload:Global.PlayerInput.bindingMask
  name: bindingMask
  nameWithType: PlayerInput.bindingMask
  fullName: PlayerInput.bindingMask
- uid: System.Nullable{InputBinding}
  commentId: T:System.Nullable{InputBinding}
  parent: System
  definition: System.Nullable`1
  name: InputBinding?
  nameWithType: InputBinding?
  fullName: InputBinding?
  spec.csharp:
  - uid: Global.InputBinding
    name: InputBinding
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: Global.InputBinding
    name: InputBinding
    isExternal: true
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Global.PlayerInput.devices*
  commentId: Overload:Global.PlayerInput.devices
  name: devices
  nameWithType: PlayerInput.devices
  fullName: PlayerInput.devices
- uid: System.Nullable{ReadOnlyArray{InputDevice}}
  commentId: T:System.Nullable{ReadOnlyArray{InputDevice}}
  parent: System
  definition: System.Nullable`1
  name: ReadOnlyArray<InputDevice>?
  nameWithType: ReadOnlyArray<InputDevice>?
  fullName: ReadOnlyArray<InputDevice>?
  nameWithType.vb: ReadOnlyArray(Of InputDevice)?
  fullName.vb: ReadOnlyArray(Of InputDevice)?
  name.vb: ReadOnlyArray(Of InputDevice)?
  spec.csharp:
  - uid: Global.ReadOnlyArray`1
    name: ReadOnlyArray
    isExternal: true
  - name: <
  - uid: Global.InputDevice
    name: InputDevice
    isExternal: true
  - name: '>'
  - name: '?'
  spec.vb:
  - uid: Global.ReadOnlyArray`1
    name: ReadOnlyArray
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.InputDevice
    name: InputDevice
    isExternal: true
  - name: )
  - name: '?'
- uid: Global.PlayerInput.controlSchemes*
  commentId: Overload:Global.PlayerInput.controlSchemes
  name: controlSchemes
  nameWithType: PlayerInput.controlSchemes
  fullName: PlayerInput.controlSchemes
- uid: Global.ReadOnlyArray{InputControlScheme}
  commentId: '!:Global.ReadOnlyArray{InputControlScheme}'
  definition: Global.ReadOnlyArray`1
  name: ReadOnlyArray<InputControlScheme>
  nameWithType: ReadOnlyArray<InputControlScheme>
  fullName: ReadOnlyArray<InputControlScheme>
  nameWithType.vb: ReadOnlyArray(Of InputControlScheme)
  fullName.vb: ReadOnlyArray(Of InputControlScheme)
  name.vb: ReadOnlyArray(Of InputControlScheme)
  spec.csharp:
  - uid: Global.ReadOnlyArray`1
    name: ReadOnlyArray
    isExternal: true
  - name: <
  - uid: Global.InputControlScheme
    name: InputControlScheme
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Global.ReadOnlyArray`1
    name: ReadOnlyArray
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.InputControlScheme
    name: InputControlScheme
    isExternal: true
  - name: )
- uid: Global.ReadOnlyArray`1
  commentId: '!:Global.ReadOnlyArray`1'
  isExternal: true
  name: ReadOnlyArray<>
  nameWithType: ReadOnlyArray<>
  fullName: ReadOnlyArray<>
  nameWithType.vb: ReadOnlyArray(Of )
  fullName.vb: ReadOnlyArray(Of )
  name.vb: ReadOnlyArray(Of )
  spec.csharp:
  - uid: Global.ReadOnlyArray`1
    name: ReadOnlyArray
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.ReadOnlyArray`1
    name: ReadOnlyArray
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: Global.PlayerInput.Contains*
  commentId: Overload:Global.PlayerInput.Contains
  name: Contains
  nameWithType: PlayerInput.Contains
  fullName: PlayerInput.Contains
- uid: Global.InputAction
  isExternal: true
  name: InputAction
  nameWithType: InputAction
  fullName: InputAction
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.PlayerInput.GetEnumerator*
  commentId: Overload:Global.PlayerInput.GetEnumerator
  name: GetEnumerator
  nameWithType: PlayerInput.GetEnumerator
  fullName: PlayerInput.GetEnumerator
- uid: Global.IEnumerator{InputAction}
  commentId: '!:Global.IEnumerator{InputAction}'
  definition: Global.IEnumerator`1
  name: IEnumerator<InputAction>
  nameWithType: IEnumerator<InputAction>
  fullName: IEnumerator<InputAction>
  nameWithType.vb: IEnumerator(Of InputAction)
  fullName.vb: IEnumerator(Of InputAction)
  name.vb: IEnumerator(Of InputAction)
  spec.csharp:
  - uid: Global.IEnumerator`1
    name: IEnumerator
    isExternal: true
  - name: <
  - uid: Global.InputAction
    name: InputAction
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Global.IEnumerator`1
    name: IEnumerator
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.InputAction
    name: InputAction
    isExternal: true
  - name: )
- uid: Global.IEnumerator`1
  isExternal: true
  name: IEnumerator<>
  nameWithType: IEnumerator<>
  fullName: IEnumerator<>
  nameWithType.vb: IEnumerator(Of )
  fullName.vb: IEnumerator(Of )
  name.vb: IEnumerator(Of )
  spec.csharp:
  - uid: Global.IEnumerator`1
    name: IEnumerator
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.IEnumerator`1
    name: IEnumerator
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: Global.PlayerInput.Enable*
  commentId: Overload:Global.PlayerInput.Enable
  name: Enable
  nameWithType: PlayerInput.Enable
  fullName: PlayerInput.Enable
- uid: Global.PlayerInput.Disable*
  commentId: Overload:Global.PlayerInput.Disable
  name: Disable
  nameWithType: PlayerInput.Disable
  fullName: PlayerInput.Disable
- uid: Global.PlayerInput.bindings*
  commentId: Overload:Global.PlayerInput.bindings
  name: bindings
  nameWithType: PlayerInput.bindings
  fullName: PlayerInput.bindings
- uid: Global.IEnumerable{InputBinding}
  commentId: '!:Global.IEnumerable{InputBinding}'
  definition: Global.IEnumerable`1
  name: IEnumerable<InputBinding>
  nameWithType: IEnumerable<InputBinding>
  fullName: IEnumerable<InputBinding>
  nameWithType.vb: IEnumerable(Of InputBinding)
  fullName.vb: IEnumerable(Of InputBinding)
  name.vb: IEnumerable(Of InputBinding)
  spec.csharp:
  - uid: Global.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: Global.InputBinding
    name: InputBinding
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Global.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.InputBinding
    name: InputBinding
    isExternal: true
  - name: )
- uid: Global.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: Global.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: Global.PlayerInput.FindAction*
  commentId: Overload:Global.PlayerInput.FindAction
  name: FindAction
  nameWithType: PlayerInput.FindAction
  fullName: PlayerInput.FindAction
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Global.PlayerInput.FindBinding*
  commentId: Overload:Global.PlayerInput.FindBinding
  name: FindBinding
  nameWithType: PlayerInput.FindBinding
  fullName: PlayerInput.FindBinding
- uid: Global.InputBinding
  commentId: '!:Global.InputBinding'
  isExternal: true
  name: InputBinding
  nameWithType: InputBinding
  fullName: InputBinding
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: PlayerInput.PlayerActions
  commentId: T:PlayerInput.PlayerActions
  isExternal: true
- uid: Global.PlayerInput.Player*
  commentId: Overload:Global.PlayerInput.Player
  name: Player
  nameWithType: PlayerInput.Player
  fullName: PlayerInput.Player
- uid: Global.PlayerInput.PlayerActions
  commentId: T:Global.PlayerInput.PlayerActions
  name: PlayerInput.PlayerActions
  nameWithType: PlayerInput.PlayerActions
  fullName: PlayerInput.PlayerActions
  spec.csharp:
  - uid: Global.PlayerInput
    name: PlayerInput
  - name: .
  - uid: Global.PlayerInput.PlayerActions
    name: PlayerActions
  spec.vb:
  - uid: Global.PlayerInput
    name: PlayerInput
  - name: .
  - uid: Global.PlayerInput.PlayerActions
    name: PlayerActions
- uid: PlayerInput.UIActions
  commentId: T:PlayerInput.UIActions
  isExternal: true
- uid: Global.PlayerInput.UI*
  commentId: Overload:Global.PlayerInput.UI
  name: UI
  nameWithType: PlayerInput.UI
  fullName: PlayerInput.UI
- uid: Global.PlayerInput.UIActions
  commentId: T:Global.PlayerInput.UIActions
  name: PlayerInput.UIActions
  nameWithType: PlayerInput.UIActions
  fullName: PlayerInput.UIActions
  spec.csharp:
  - uid: Global.PlayerInput
    name: PlayerInput
  - name: .
  - uid: Global.PlayerInput.UIActions
    name: UIActions
  spec.vb:
  - uid: Global.PlayerInput
    name: PlayerInput
  - name: .
  - uid: Global.PlayerInput.UIActions
    name: UIActions
- uid: Global.PlayerInput.ScreenshotScheme*
  commentId: Overload:Global.PlayerInput.ScreenshotScheme
  name: ScreenshotScheme
  nameWithType: PlayerInput.ScreenshotScheme
  fullName: PlayerInput.ScreenshotScheme
- uid: Global.InputControlScheme
  commentId: '!:Global.InputControlScheme'
  isExternal: true
  name: InputControlScheme
  nameWithType: InputControlScheme
  fullName: InputControlScheme
