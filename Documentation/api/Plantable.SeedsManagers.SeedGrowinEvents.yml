### YamlMime:ManagedReference
items:
- uid: Plantable.SeedsManagers.SeedGrowinEvents
  commentId: T:Plantable.SeedsManagers.SeedGrowinEvents
  id: SeedGrowinEvents
  parent: Plantable.SeedsManagers
  children:
  - Plantable.SeedsManagers.SeedGrowinEvents.OnAddToList
  - Plantable.SeedsManagers.SeedGrowinEvents.OnGetPlantableInfo
  - Plantable.SeedsManagers.SeedGrowinEvents.OnHarvestPlant
  - Plantable.SeedsManagers.SeedGrowinEvents.OnRemoveFromDictionary
  - Plantable.SeedsManagers.SeedGrowinEvents.OnResetGrowingTime
  - Plantable.SeedsManagers.SeedGrowinEvents.OnSpawnAttackingVegetable
  langs:
  - csharp
  - vb
  name: SeedGrowinEvents
  nameWithType: SeedGrowinEvents
  fullName: Plantable.SeedsManagers.SeedGrowinEvents
  type: Class
  source:
    id: SeedGrowinEvents
    path: ''
    startLine: 33535
  assemblies:
  - cs.temp.dll
  namespace: Plantable.SeedsManagers
  syntax:
    content: public class SeedGrowinEvents
    content.vb: Public Class SeedGrowinEvents
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Plantable.SeedsManagers.SeedGrowinEvents.OnSpawnAttackingVegetable
  commentId: F:Plantable.SeedsManagers.SeedGrowinEvents.OnSpawnAttackingVegetable
  id: OnSpawnAttackingVegetable
  parent: Plantable.SeedsManagers.SeedGrowinEvents
  langs:
  - csharp
  - vb
  name: OnSpawnAttackingVegetable
  nameWithType: SeedGrowinEvents.OnSpawnAttackingVegetable
  fullName: Plantable.SeedsManagers.SeedGrowinEvents.OnSpawnAttackingVegetable
  type: Field
  source:
    id: OnSpawnAttackingVegetable
    path: ''
    startLine: 33539
  assemblies:
  - cs.temp.dll
  namespace: Plantable.SeedsManagers
  example: []
  syntax:
    content: public static Action<int, Vector2Int> OnSpawnAttackingVegetable
    return:
      type: Global.Action{System.Int32,Vector2Int}
    content.vb: Public Shared OnSpawnAttackingVegetable As Action(Of Integer, Vector2Int)
- uid: Plantable.SeedsManagers.SeedGrowinEvents.OnAddToList
  commentId: F:Plantable.SeedsManagers.SeedGrowinEvents.OnAddToList
  id: OnAddToList
  parent: Plantable.SeedsManagers.SeedGrowinEvents
  langs:
  - csharp
  - vb
  name: OnAddToList
  nameWithType: SeedGrowinEvents.OnAddToList
  fullName: Plantable.SeedsManagers.SeedGrowinEvents.OnAddToList
  type: Field
  source:
    id: OnAddToList
    path: ''
    startLine: 33541
  assemblies:
  - cs.temp.dll
  namespace: Plantable.SeedsManagers
  syntax:
    content: public static Action<PlantableData> OnAddToList
    return:
      type: Global.Action{Plantable.PlantableData}
    content.vb: Public Shared OnAddToList As Action(Of PlantableData)
- uid: Plantable.SeedsManagers.SeedGrowinEvents.OnRemoveFromDictionary
  commentId: F:Plantable.SeedsManagers.SeedGrowinEvents.OnRemoveFromDictionary
  id: OnRemoveFromDictionary
  parent: Plantable.SeedsManagers.SeedGrowinEvents
  langs:
  - csharp
  - vb
  name: OnRemoveFromDictionary
  nameWithType: SeedGrowinEvents.OnRemoveFromDictionary
  fullName: Plantable.SeedsManagers.SeedGrowinEvents.OnRemoveFromDictionary
  type: Field
  source:
    id: OnRemoveFromDictionary
    path: ''
    startLine: 33542
  assemblies:
  - cs.temp.dll
  namespace: Plantable.SeedsManagers
  syntax:
    content: public static Action<Vector2> OnRemoveFromDictionary
    return:
      type: Global.Action{Vector2}
    content.vb: Public Shared OnRemoveFromDictionary As Action(Of Vector2)
- uid: Plantable.SeedsManagers.SeedGrowinEvents.OnResetGrowingTime
  commentId: F:Plantable.SeedsManagers.SeedGrowinEvents.OnResetGrowingTime
  id: OnResetGrowingTime
  parent: Plantable.SeedsManagers.SeedGrowinEvents
  langs:
  - csharp
  - vb
  name: OnResetGrowingTime
  nameWithType: SeedGrowinEvents.OnResetGrowingTime
  fullName: Plantable.SeedsManagers.SeedGrowinEvents.OnResetGrowingTime
  type: Field
  source:
    id: OnResetGrowingTime
    path: ''
    startLine: 33543
  assemblies:
  - cs.temp.dll
  namespace: Plantable.SeedsManagers
  syntax:
    content: public static Action<Vector2Int> OnResetGrowingTime
    return:
      type: Global.Action{Vector2Int}
    content.vb: Public Shared OnResetGrowingTime As Action(Of Vector2Int)
- uid: Plantable.SeedsManagers.SeedGrowinEvents.OnHarvestPlant
  commentId: F:Plantable.SeedsManagers.SeedGrowinEvents.OnHarvestPlant
  id: OnHarvestPlant
  parent: Plantable.SeedsManagers.SeedGrowinEvents
  langs:
  - csharp
  - vb
  name: OnHarvestPlant
  nameWithType: SeedGrowinEvents.OnHarvestPlant
  fullName: Plantable.SeedsManagers.SeedGrowinEvents.OnHarvestPlant
  type: Field
  source:
    id: OnHarvestPlant
    path: ''
    startLine: 33544
  assemblies:
  - cs.temp.dll
  namespace: Plantable.SeedsManagers
  syntax:
    content: public static Func<Vector2Int, UniTask> OnHarvestPlant
    return:
      type: Global.Func{Vector2Int,UniTask}
    content.vb: Public Shared OnHarvestPlant As Func(Of Vector2Int, UniTask)
- uid: Plantable.SeedsManagers.SeedGrowinEvents.OnGetPlantableInfo
  commentId: F:Plantable.SeedsManagers.SeedGrowinEvents.OnGetPlantableInfo
  id: OnGetPlantableInfo
  parent: Plantable.SeedsManagers.SeedGrowinEvents
  langs:
  - csharp
  - vb
  name: OnGetPlantableInfo
  nameWithType: SeedGrowinEvents.OnGetPlantableInfo
  fullName: Plantable.SeedsManagers.SeedGrowinEvents.OnGetPlantableInfo
  type: Field
  source:
    id: OnGetPlantableInfo
    path: ''
    startLine: 33545
  assemblies:
  - cs.temp.dll
  namespace: Plantable.SeedsManagers
  syntax:
    content: public static Func<Vector2Int, (TimeSpan finishTime, string cropName)> OnGetPlantableInfo
    return:
      type: Global.Func{Vector2Int,System.ValueTuple{TimeSpan,System.String}}
    content.vb: Public Shared OnGetPlantableInfo As Func(Of Vector2Int, (finishTime As TimeSpan, cropName As String))
references:
- uid: Plantable.SeedsManagers
  commentId: N:Plantable.SeedsManagers
  name: Plantable.SeedsManagers
  nameWithType: Plantable.SeedsManagers
  fullName: Plantable.SeedsManagers
  spec.csharp:
  - uid: Plantable
    name: Plantable
  - name: .
  - uid: Plantable.SeedsManagers
    name: SeedsManagers
  spec.vb:
  - uid: Plantable
    name: Plantable
  - name: .
  - uid: Plantable.SeedsManagers
    name: SeedsManagers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.Action{System.Int32,Vector2Int}
  commentId: '!:Global.Action{System.Int32,Vector2Int}'
  definition: Global.Action`2
  name: Action<int, Vector2Int>
  nameWithType: Action<int, Vector2Int>
  fullName: Action<int, Vector2Int>
  nameWithType.vb: Action(Of Integer, Vector2Int)
  fullName.vb: Action(Of Integer, Vector2Int)
  name.vb: Action(Of Integer, Vector2Int)
  spec.csharp:
  - uid: Global.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: Global.Vector2Int
    name: Vector2Int
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Global.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: Global.Vector2Int
    name: Vector2Int
    isExternal: true
  - name: )
- uid: Global.Action`2
  isExternal: true
  name: Action<, >
  nameWithType: Action<, >
  fullName: Action<, >
  nameWithType.vb: Action(Of , )
  fullName.vb: Action(Of , )
  name.vb: Action(Of , )
  spec.csharp:
  - uid: Global.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: ''
  - name: ','
  - name: " "
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: ','
  - name: " "
  - name: ''
  - name: )
- uid: Global.Action{Plantable.PlantableData}
  commentId: '!:Global.Action{Plantable.PlantableData}'
  definition: Global.Action`1
  name: Action<PlantableData>
  nameWithType: Action<PlantableData>
  fullName: Action<Plantable.PlantableData>
  nameWithType.vb: Action(Of PlantableData)
  fullName.vb: Action(Of Plantable.PlantableData)
  name.vb: Action(Of PlantableData)
  spec.csharp:
  - uid: Global.Action`1
    name: Action
    isExternal: true
  - name: <
  - uid: Plantable.PlantableData
    name: PlantableData
  - name: '>'
  spec.vb:
  - uid: Global.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Plantable.PlantableData
    name: PlantableData
  - name: )
- uid: Global.Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Global.Action`1
    name: Action
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: Global.Action{Vector2}
  commentId: '!:Global.Action{Vector2}'
  definition: Global.Action`1
  name: Action<Vector2>
  nameWithType: Action<Vector2>
  fullName: Action<Vector2>
  nameWithType.vb: Action(Of Vector2)
  fullName.vb: Action(Of Vector2)
  name.vb: Action(Of Vector2)
  spec.csharp:
  - uid: Global.Action`1
    name: Action
    isExternal: true
  - name: <
  - uid: Global.Vector2
    name: Vector2
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Global.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.Vector2
    name: Vector2
    isExternal: true
  - name: )
- uid: Global.Action{Vector2Int}
  commentId: '!:Global.Action{Vector2Int}'
  definition: Global.Action`1
  name: Action<Vector2Int>
  nameWithType: Action<Vector2Int>
  fullName: Action<Vector2Int>
  nameWithType.vb: Action(Of Vector2Int)
  fullName.vb: Action(Of Vector2Int)
  name.vb: Action(Of Vector2Int)
  spec.csharp:
  - uid: Global.Action`1
    name: Action
    isExternal: true
  - name: <
  - uid: Global.Vector2Int
    name: Vector2Int
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Global.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.Vector2Int
    name: Vector2Int
    isExternal: true
  - name: )
- uid: Global.Func{Vector2Int,UniTask}
  commentId: '!:Global.Func{Vector2Int,UniTask}'
  definition: Global.Func`2
  name: Func<Vector2Int, UniTask>
  nameWithType: Func<Vector2Int, UniTask>
  fullName: Func<Vector2Int, UniTask>
  nameWithType.vb: Func(Of Vector2Int, UniTask)
  fullName.vb: Func(Of Vector2Int, UniTask)
  name.vb: Func(Of Vector2Int, UniTask)
  spec.csharp:
  - uid: Global.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: Global.Vector2Int
    name: Vector2Int
    isExternal: true
  - name: ','
  - name: " "
  - uid: Global.UniTask
    name: UniTask
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Global.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.Vector2Int
    name: Vector2Int
    isExternal: true
  - name: ','
  - name: " "
  - uid: Global.UniTask
    name: UniTask
    isExternal: true
  - name: )
- uid: Global.Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Global.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: ''
  - name: ','
  - name: " "
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: ','
  - name: " "
  - name: ''
  - name: )
- uid: Global.Func{Vector2Int,System.ValueTuple{TimeSpan,System.String}}
  commentId: '!:Global.Func{Vector2Int,System.ValueTuple{TimeSpan,System.String}}'
  definition: Global.Func`2
  name: Func<Vector2Int, (TimeSpan finishTime, string cropName)>
  nameWithType: Func<Vector2Int, (TimeSpan finishTime, string cropName)>
  fullName: Func<Vector2Int, (TimeSpan finishTime, string cropName)>
  nameWithType.vb: Func(Of Vector2Int, (finishTime As TimeSpan, cropName As String))
  fullName.vb: Func(Of Vector2Int, (finishTime As TimeSpan, cropName As String))
  name.vb: Func(Of Vector2Int, (finishTime As TimeSpan, cropName As String))
  spec.csharp:
  - uid: Global.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: Global.Vector2Int
    name: Vector2Int
    isExternal: true
  - name: ','
  - name: " "
  - name: (
  - uid: Global.TimeSpan
    name: TimeSpan
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{TimeSpan,System.String}.finishTime
    name: finishTime
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{TimeSpan,System.String}.cropName
    name: cropName
  - name: )
  - name: '>'
  spec.vb:
  - uid: Global.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.Vector2Int
    name: Vector2Int
    isExternal: true
  - name: ','
  - name: " "
  - name: (
  - uid: System.ValueTuple{TimeSpan,System.String}.finishTime
    name: finishTime
  - name: " "
  - name: As
  - name: " "
  - uid: Global.TimeSpan
    name: TimeSpan
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.ValueTuple{TimeSpan,System.String}.cropName
    name: cropName
  - name: " "
  - name: As
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
  - name: )
