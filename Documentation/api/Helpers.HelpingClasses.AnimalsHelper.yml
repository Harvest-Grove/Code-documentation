### YamlMime:ManagedReference
items:
- uid: Helpers.HelpingClasses.AnimalsHelper
  commentId: T:Helpers.HelpingClasses.AnimalsHelper
  id: AnimalsHelper
  parent: Helpers.HelpingClasses
  children:
  - Helpers.HelpingClasses.AnimalsHelper.CanBeBred(System.Int32,List{MainAnimalsEnum},System.Boolean,AnimalHousingManager)
  - Helpers.HelpingClasses.AnimalsHelper.GetAnimalType(AnimalInfo)
  - Helpers.HelpingClasses.AnimalsHelper.GetAnimalTypeFromID(System.Int32,AnimalHousingManager)
  - Helpers.HelpingClasses.AnimalsHelper.GetClosestFoodPosition(System.Int32,MainAnimalsEnum,MapBuildingsDataSO,AnimalsDatabase)
  - Helpers.HelpingClasses.AnimalsHelper.GetFeedType(MainAnimalsEnum,AnimalsDatabase)
  - Helpers.HelpingClasses.AnimalsHelper.GetScaterringDirection(System.Int32,System.Int32,Transform)
  - Helpers.HelpingClasses.AnimalsHelper.ShowPopup(DeathCaseEnum,System.UInt16,List{System.String})
  langs:
  - csharp
  - vb
  name: AnimalsHelper
  nameWithType: AnimalsHelper
  fullName: Helpers.HelpingClasses.AnimalsHelper
  type: Class
  source:
    id: AnimalsHelper
    path: ''
    startLine: 46584
  assemblies:
  - cs.temp.dll
  namespace: Helpers.HelpingClasses
  syntax:
    content: public static class AnimalsHelper
    content.vb: Public Module AnimalsHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Helpers.HelpingClasses.AnimalsHelper.ShowPopup(DeathCaseEnum,System.UInt16,List{System.String})
  commentId: M:Helpers.HelpingClasses.AnimalsHelper.ShowPopup(DeathCaseEnum,System.UInt16,List{System.String})
  id: ShowPopup(DeathCaseEnum,System.UInt16,List{System.String})
  parent: Helpers.HelpingClasses.AnimalsHelper
  langs:
  - csharp
  - vb
  name: ShowPopup(DeathCaseEnum, ushort, List<string>)
  nameWithType: AnimalsHelper.ShowPopup(DeathCaseEnum, ushort, List<string>)
  fullName: Helpers.HelpingClasses.AnimalsHelper.ShowPopup(DeathCaseEnum, ushort, List<string>)
  type: Method
  source:
    id: ShowPopup
    path: ''
    startLine: 46586
  assemblies:
  - cs.temp.dll
  namespace: Helpers.HelpingClasses
  syntax:
    content: public static void ShowPopup(DeathCaseEnum deathCaseEnum, ushort deadAnimals, List<string> deadAnimalsName)
    parameters:
    - id: deathCaseEnum
      type: Global.DeathCaseEnum
    - id: deadAnimals
      type: System.UInt16
    - id: deadAnimalsName
      type: Global.List{System.String}
    content.vb: Public Shared Sub ShowPopup(deathCaseEnum As DeathCaseEnum, deadAnimals As UShort, deadAnimalsName As List(Of String))
  overload: Helpers.HelpingClasses.AnimalsHelper.ShowPopup*
  nameWithType.vb: AnimalsHelper.ShowPopup(DeathCaseEnum, UShort, List(Of String))
  fullName.vb: Helpers.HelpingClasses.AnimalsHelper.ShowPopup(DeathCaseEnum, UShort, List(Of String))
  name.vb: ShowPopup(DeathCaseEnum, UShort, List(Of String))
- uid: Helpers.HelpingClasses.AnimalsHelper.CanBeBred(System.Int32,List{MainAnimalsEnum},System.Boolean,AnimalHousingManager)
  commentId: M:Helpers.HelpingClasses.AnimalsHelper.CanBeBred(System.Int32,List{MainAnimalsEnum},System.Boolean,AnimalHousingManager)
  id: CanBeBred(System.Int32,List{MainAnimalsEnum},System.Boolean,AnimalHousingManager)
  parent: Helpers.HelpingClasses.AnimalsHelper
  langs:
  - csharp
  - vb
  name: CanBeBred(int, List<MainAnimalsEnum>, bool, AnimalHousingManager)
  nameWithType: AnimalsHelper.CanBeBred(int, List<MainAnimalsEnum>, bool, AnimalHousingManager)
  fullName: Helpers.HelpingClasses.AnimalsHelper.CanBeBred(int, List<MainAnimalsEnum>, bool, AnimalHousingManager)
  type: Method
  source:
    id: CanBeBred
    path: ''
    startLine: 46642
  assemblies:
  - cs.temp.dll
  namespace: Helpers.HelpingClasses
  summary: "\nDetermines whether an animal with the given id can be bred\n"
  example: []
  syntax:
    content: public static bool CanBeBred(int ID, List<MainAnimalsEnum> availableAnimals, bool showPopup, AnimalHousingManager animalHousingManager)
    parameters:
    - id: ID
      type: System.Int32
    - id: availableAnimals
      type: Global.List{MainAnimalsEnum}
      description: The list of available animals
    - id: showPopup
      type: System.Boolean
      description: If the popup should be shown
    - id: animalHousingManager
      type: Global.AnimalHousingManager
    return:
      type: System.Boolean
      description: True if the animal can be bred, False otherwise
    content.vb: Public Shared Function CanBeBred(ID As Integer, availableAnimals As List(Of MainAnimalsEnum), showPopup As Boolean, animalHousingManager As AnimalHousingManager) As Boolean
  overload: Helpers.HelpingClasses.AnimalsHelper.CanBeBred*
  nameWithType.vb: AnimalsHelper.CanBeBred(Integer, List(Of MainAnimalsEnum), Boolean, AnimalHousingManager)
  fullName.vb: Helpers.HelpingClasses.AnimalsHelper.CanBeBred(Integer, List(Of MainAnimalsEnum), Boolean, AnimalHousingManager)
  name.vb: CanBeBred(Integer, List(Of MainAnimalsEnum), Boolean, AnimalHousingManager)
- uid: Helpers.HelpingClasses.AnimalsHelper.GetAnimalTypeFromID(System.Int32,AnimalHousingManager)
  commentId: M:Helpers.HelpingClasses.AnimalsHelper.GetAnimalTypeFromID(System.Int32,AnimalHousingManager)
  id: GetAnimalTypeFromID(System.Int32,AnimalHousingManager)
  parent: Helpers.HelpingClasses.AnimalsHelper
  langs:
  - csharp
  - vb
  name: GetAnimalTypeFromID(int, AnimalHousingManager)
  nameWithType: AnimalsHelper.GetAnimalTypeFromID(int, AnimalHousingManager)
  fullName: Helpers.HelpingClasses.AnimalsHelper.GetAnimalTypeFromID(int, AnimalHousingManager)
  type: Method
  source:
    id: GetAnimalTypeFromID
    path: ''
    startLine: 46685
  assemblies:
  - cs.temp.dll
  namespace: Helpers.HelpingClasses
  syntax:
    content: public static MainAnimalsEnum GetAnimalTypeFromID(int ID, AnimalHousingManager animalHousingManager)
    parameters:
    - id: ID
      type: System.Int32
    - id: animalHousingManager
      type: Global.AnimalHousingManager
    return:
      type: Global.MainAnimalsEnum
    content.vb: Public Shared Function GetAnimalTypeFromID(ID As Integer, animalHousingManager As AnimalHousingManager) As MainAnimalsEnum
  overload: Helpers.HelpingClasses.AnimalsHelper.GetAnimalTypeFromID*
  nameWithType.vb: AnimalsHelper.GetAnimalTypeFromID(Integer, AnimalHousingManager)
  fullName.vb: Helpers.HelpingClasses.AnimalsHelper.GetAnimalTypeFromID(Integer, AnimalHousingManager)
  name.vb: GetAnimalTypeFromID(Integer, AnimalHousingManager)
- uid: Helpers.HelpingClasses.AnimalsHelper.GetAnimalType(AnimalInfo)
  commentId: M:Helpers.HelpingClasses.AnimalsHelper.GetAnimalType(AnimalInfo)
  id: GetAnimalType(AnimalInfo)
  parent: Helpers.HelpingClasses.AnimalsHelper
  langs:
  - csharp
  - vb
  name: GetAnimalType(AnimalInfo)
  nameWithType: AnimalsHelper.GetAnimalType(AnimalInfo)
  fullName: Helpers.HelpingClasses.AnimalsHelper.GetAnimalType(AnimalInfo)
  type: Method
  source:
    id: GetAnimalType
    path: ''
    startLine: 46697
  assemblies:
  - cs.temp.dll
  namespace: Helpers.HelpingClasses
  summary: "\nGet the animal type based on if it has secondary type or not\n"
  example: []
  syntax:
    content: public static string GetAnimalType(AnimalInfo animalInfo)
    parameters:
    - id: animalInfo
      type: Global.AnimalInfo
      description: Information about the animal
    return:
      type: System.String
      description: An animal type
    content.vb: Public Shared Function GetAnimalType(animalInfo As AnimalInfo) As String
  overload: Helpers.HelpingClasses.AnimalsHelper.GetAnimalType*
- uid: Helpers.HelpingClasses.AnimalsHelper.GetFeedType(MainAnimalsEnum,AnimalsDatabase)
  commentId: M:Helpers.HelpingClasses.AnimalsHelper.GetFeedType(MainAnimalsEnum,AnimalsDatabase)
  id: GetFeedType(MainAnimalsEnum,AnimalsDatabase)
  parent: Helpers.HelpingClasses.AnimalsHelper
  langs:
  - csharp
  - vb
  name: GetFeedType(MainAnimalsEnum, AnimalsDatabase)
  nameWithType: AnimalsHelper.GetFeedType(MainAnimalsEnum, AnimalsDatabase)
  fullName: Helpers.HelpingClasses.AnimalsHelper.GetFeedType(MainAnimalsEnum, AnimalsDatabase)
  type: Method
  source:
    id: GetFeedType
    path: ''
    startLine: 46703
  assemblies:
  - cs.temp.dll
  namespace: Helpers.HelpingClasses
  syntax:
    content: public static FeedType GetFeedType(MainAnimalsEnum animalType, AnimalsDatabase animalDatabase)
    parameters:
    - id: animalType
      type: Global.MainAnimalsEnum
    - id: animalDatabase
      type: Global.AnimalsDatabase
    return:
      type: Global.FeedType
    content.vb: Public Shared Function GetFeedType(animalType As MainAnimalsEnum, animalDatabase As AnimalsDatabase) As FeedType
  overload: Helpers.HelpingClasses.AnimalsHelper.GetFeedType*
- uid: Helpers.HelpingClasses.AnimalsHelper.GetClosestFoodPosition(System.Int32,MainAnimalsEnum,MapBuildingsDataSO,AnimalsDatabase)
  commentId: M:Helpers.HelpingClasses.AnimalsHelper.GetClosestFoodPosition(System.Int32,MainAnimalsEnum,MapBuildingsDataSO,AnimalsDatabase)
  id: GetClosestFoodPosition(System.Int32,MainAnimalsEnum,MapBuildingsDataSO,AnimalsDatabase)
  parent: Helpers.HelpingClasses.AnimalsHelper
  langs:
  - csharp
  - vb
  name: GetClosestFoodPosition(int, MainAnimalsEnum, MapBuildingsDataSO, AnimalsDatabase)
  nameWithType: AnimalsHelper.GetClosestFoodPosition(int, MainAnimalsEnum, MapBuildingsDataSO, AnimalsDatabase)
  fullName: Helpers.HelpingClasses.AnimalsHelper.GetClosestFoodPosition(int, MainAnimalsEnum, MapBuildingsDataSO, AnimalsDatabase)
  type: Method
  source:
    id: GetClosestFoodPosition
    path: ''
    startLine: 46712
  assemblies:
  - cs.temp.dll
  namespace: Helpers.HelpingClasses
  summary: "\nReturns the closest food position to the animal\n"
  example: []
  syntax:
    content: public static (Vector2, IFeedSource) GetClosestFoodPosition(int ID, MainAnimalsEnum animalType, MapBuildingsDataSO mapBuildingsData, AnimalsDatabase animalDatabase)
    parameters:
    - id: ID
      type: System.Int32
    - id: animalType
      type: Global.MainAnimalsEnum
    - id: mapBuildingsData
      type: Global.MapBuildingsDataSO
    - id: animalDatabase
      type: Global.AnimalsDatabase
    return:
      type: System.ValueTuple{Vector2,IFeedSource}
    content.vb: Public Shared Function GetClosestFoodPosition(ID As Integer, animalType As MainAnimalsEnum, mapBuildingsData As MapBuildingsDataSO, animalDatabase As AnimalsDatabase) As (Vector2, IFeedSource)
  overload: Helpers.HelpingClasses.AnimalsHelper.GetClosestFoodPosition*
  nameWithType.vb: AnimalsHelper.GetClosestFoodPosition(Integer, MainAnimalsEnum, MapBuildingsDataSO, AnimalsDatabase)
  fullName.vb: Helpers.HelpingClasses.AnimalsHelper.GetClosestFoodPosition(Integer, MainAnimalsEnum, MapBuildingsDataSO, AnimalsDatabase)
  name.vb: GetClosestFoodPosition(Integer, MainAnimalsEnum, MapBuildingsDataSO, AnimalsDatabase)
- uid: Helpers.HelpingClasses.AnimalsHelper.GetScaterringDirection(System.Int32,System.Int32,Transform)
  commentId: M:Helpers.HelpingClasses.AnimalsHelper.GetScaterringDirection(System.Int32,System.Int32,Transform)
  id: GetScaterringDirection(System.Int32,System.Int32,Transform)
  parent: Helpers.HelpingClasses.AnimalsHelper
  langs:
  - csharp
  - vb
  name: GetScaterringDirection(int, int, Transform)
  nameWithType: AnimalsHelper.GetScaterringDirection(int, int, Transform)
  fullName: Helpers.HelpingClasses.AnimalsHelper.GetScaterringDirection(int, int, Transform)
  type: Method
  source:
    id: GetScaterringDirection
    path: ''
    startLine: 46744
  assemblies:
  - cs.temp.dll
  namespace: Helpers.HelpingClasses
  summary: "\nGets the direction of the scatering {if something si fucked, its probably this class}\n"
  example: []
  syntax:
    content: public static int GetScaterringDirection(int xPos, int yPos, Transform playerPos)
    parameters:
    - id: xPos
      type: System.Int32
    - id: yPos
      type: System.Int32
    - id: playerPos
      type: Global.Transform
    return:
      type: System.Int32
    content.vb: Public Shared Function GetScaterringDirection(xPos As Integer, yPos As Integer, playerPos As Transform) As Integer
  overload: Helpers.HelpingClasses.AnimalsHelper.GetScaterringDirection*
  nameWithType.vb: AnimalsHelper.GetScaterringDirection(Integer, Integer, Transform)
  fullName.vb: Helpers.HelpingClasses.AnimalsHelper.GetScaterringDirection(Integer, Integer, Transform)
  name.vb: GetScaterringDirection(Integer, Integer, Transform)
references:
- uid: Helpers.HelpingClasses
  commentId: N:Helpers.HelpingClasses
  name: Helpers.HelpingClasses
  nameWithType: Helpers.HelpingClasses
  fullName: Helpers.HelpingClasses
  spec.csharp:
  - uid: Helpers
    name: Helpers
  - name: .
  - uid: Helpers.HelpingClasses
    name: HelpingClasses
  spec.vb:
  - uid: Helpers
    name: Helpers
  - name: .
  - uid: Helpers.HelpingClasses
    name: HelpingClasses
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Helpers.HelpingClasses.AnimalsHelper.ShowPopup*
  commentId: Overload:Helpers.HelpingClasses.AnimalsHelper.ShowPopup
  name: ShowPopup
  nameWithType: AnimalsHelper.ShowPopup
  fullName: Helpers.HelpingClasses.AnimalsHelper.ShowPopup
- uid: Global.DeathCaseEnum
  commentId: '!:Global.DeathCaseEnum'
  isExternal: true
  name: DeathCaseEnum
  nameWithType: DeathCaseEnum
  fullName: DeathCaseEnum
- uid: System.UInt16
  commentId: T:System.UInt16
  parent: System
  isExternal: true
  name: ushort
  nameWithType: ushort
  fullName: ushort
  nameWithType.vb: UShort
  fullName.vb: UShort
  name.vb: UShort
- uid: Global.List{System.String}
  commentId: '!:Global.List{System.String}'
  definition: Global.List`1
  name: List<string>
  nameWithType: List<string>
  fullName: List<string>
  nameWithType.vb: List(Of String)
  fullName.vb: List(Of String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: Global.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: Helpers.HelpingClasses.AnimalsHelper.CanBeBred*
  commentId: Overload:Helpers.HelpingClasses.AnimalsHelper.CanBeBred
  name: CanBeBred
  nameWithType: AnimalsHelper.CanBeBred
  fullName: Helpers.HelpingClasses.AnimalsHelper.CanBeBred
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Global.List{MainAnimalsEnum}
  commentId: '!:Global.List{MainAnimalsEnum}'
  definition: Global.List`1
  name: List<MainAnimalsEnum>
  nameWithType: List<MainAnimalsEnum>
  fullName: List<MainAnimalsEnum>
  nameWithType.vb: List(Of MainAnimalsEnum)
  fullName.vb: List(Of MainAnimalsEnum)
  name.vb: List(Of MainAnimalsEnum)
  spec.csharp:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - uid: Global.MainAnimalsEnum
    name: MainAnimalsEnum
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Global.MainAnimalsEnum
    name: MainAnimalsEnum
    isExternal: true
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.AnimalHousingManager
  isExternal: true
  name: AnimalHousingManager
  nameWithType: AnimalHousingManager
  fullName: AnimalHousingManager
- uid: Helpers.HelpingClasses.AnimalsHelper.GetAnimalTypeFromID*
  commentId: Overload:Helpers.HelpingClasses.AnimalsHelper.GetAnimalTypeFromID
  name: GetAnimalTypeFromID
  nameWithType: AnimalsHelper.GetAnimalTypeFromID
  fullName: Helpers.HelpingClasses.AnimalsHelper.GetAnimalTypeFromID
- uid: Global.MainAnimalsEnum
  isExternal: true
  name: MainAnimalsEnum
  nameWithType: MainAnimalsEnum
  fullName: MainAnimalsEnum
- uid: Helpers.HelpingClasses.AnimalsHelper.GetAnimalType*
  commentId: Overload:Helpers.HelpingClasses.AnimalsHelper.GetAnimalType
  name: GetAnimalType
  nameWithType: AnimalsHelper.GetAnimalType
  fullName: Helpers.HelpingClasses.AnimalsHelper.GetAnimalType
- uid: Global.AnimalInfo
  isExternal: true
  name: AnimalInfo
  nameWithType: AnimalInfo
  fullName: AnimalInfo
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Helpers.HelpingClasses.AnimalsHelper.GetFeedType*
  commentId: Overload:Helpers.HelpingClasses.AnimalsHelper.GetFeedType
  name: GetFeedType
  nameWithType: AnimalsHelper.GetFeedType
  fullName: Helpers.HelpingClasses.AnimalsHelper.GetFeedType
- uid: Global.AnimalsDatabase
  isExternal: true
  name: AnimalsDatabase
  nameWithType: AnimalsDatabase
  fullName: AnimalsDatabase
- uid: Global.FeedType
  isExternal: true
  name: FeedType
  nameWithType: FeedType
  fullName: FeedType
- uid: Helpers.HelpingClasses.AnimalsHelper.GetClosestFoodPosition*
  commentId: Overload:Helpers.HelpingClasses.AnimalsHelper.GetClosestFoodPosition
  name: GetClosestFoodPosition
  nameWithType: AnimalsHelper.GetClosestFoodPosition
  fullName: Helpers.HelpingClasses.AnimalsHelper.GetClosestFoodPosition
- uid: Global.MapBuildingsDataSO
  isExternal: true
  name: MapBuildingsDataSO
  nameWithType: MapBuildingsDataSO
  fullName: MapBuildingsDataSO
- uid: System.ValueTuple{Vector2,IFeedSource}
  commentId: T:System.ValueTuple{Vector2,IFeedSource}
  parent: System
  definition: System.ValueTuple`2
  name: (Vector2, IFeedSource)
  nameWithType: (Vector2, IFeedSource)
  fullName: (Vector2, IFeedSource)
  spec.csharp:
  - name: (
  - uid: Global.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: Global.IFeedSource
    name: IFeedSource
    isExternal: true
  - name: )
  spec.vb:
  - name: (
  - uid: Global.Vector2
    name: Vector2
    isExternal: true
  - name: ','
  - name: " "
  - uid: Global.IFeedSource
    name: IFeedSource
    isExternal: true
  - name: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  name: (T1, T2)
  nameWithType: (T1, T2)
  fullName: (T1, T2)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: Helpers.HelpingClasses.AnimalsHelper.GetScaterringDirection*
  commentId: Overload:Helpers.HelpingClasses.AnimalsHelper.GetScaterringDirection
  name: GetScaterringDirection
  nameWithType: AnimalsHelper.GetScaterringDirection
  fullName: Helpers.HelpingClasses.AnimalsHelper.GetScaterringDirection
- uid: Global.Transform
  isExternal: true
  name: Transform
  nameWithType: Transform
  fullName: Transform
